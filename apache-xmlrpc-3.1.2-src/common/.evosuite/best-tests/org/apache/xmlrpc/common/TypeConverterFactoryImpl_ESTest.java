/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 09:02:16 GMT 2021
 */

package org.apache.xmlrpc.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import org.apache.xmlrpc.common.TypeConverter;
import org.apache.xmlrpc.common.TypeConverterFactoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeConverterFactoryImpl_ESTest extends TypeConverterFactoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      // Undeclared exception!
      try { 
        typeConverterFactoryImpl0.getTypeConverter((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.common.TypeConverterFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Properties> class0 = Properties.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Calendar> class0 = Calendar.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Date> class0 = Date.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Double> class0 = Double.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Float> class0 = Float.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<BigInteger> class0 = BigInteger.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Long> class0 = Long.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Integer> class0 = Integer.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Short> class0 = Short.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Byte> class0 = Byte.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Character> class0 = Character.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Boolean> class0 = Boolean.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Object> class0 = Object.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Double> class0 = Double.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Float> class0 = Float.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Long> class0 = Long.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Integer> class0 = Integer.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Short> class0 = Short.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Byte> class0 = Byte.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Character> class0 = Character.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<Boolean> class0 = Boolean.TYPE;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeConverter typeConverter0 = typeConverterFactoryImpl0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
  }
}
