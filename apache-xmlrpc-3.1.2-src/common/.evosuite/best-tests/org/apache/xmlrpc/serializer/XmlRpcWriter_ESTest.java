/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 09:03:37 GMT 2021
 */

package org.apache.xmlrpc.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.XmlRpcRequestConfig;
import org.apache.xmlrpc.common.TypeFactoryImpl;
import org.apache.xmlrpc.common.XmlRpcController;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcStreamConfig;
import org.apache.xmlrpc.serializer.XmlRpcWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcWriter_ESTest extends XmlRpcWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcWriter0);
      
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("").when(xmlRpcRequest0).getMethodName();
      doReturn((-1653)).when(xmlRpcRequest0).getParameterCount();
      xmlRpcWriter0.write(xmlRpcRequest0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      assertNotNull(defaultHandler0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler0, typeFactoryImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertNotNull(xmlRpcWriter0);
      
      xmlRpcWriter0.writeValue("http://ws.apache.org/xmlrpc/namespaces/extensions");
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      assertNotNull(defaultHandler0);
      
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler0, typeFactoryImpl0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcWriter0);
      
      try { 
        xmlRpcWriter0.writeValue((Object) null);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, xMLFilterImpl0, typeFactoryImpl0);
      assertNotNull(xmlRpcWriter0);
      
      // Undeclared exception!
      try { 
        xmlRpcWriter0.writeValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      assertNotNull(xMLReaderAdapter0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, (ContentHandler) null, typeFactoryImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNotNull(xmlRpcWriter0);
      
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, (Object) xMLReaderAdapter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNotNull(xmlRpcWriter0);
      
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("").when(xmlRpcRequest0).getMethodName();
      doReturn((Object) null).when(xmlRpcRequest0).getParameter(anyInt());
      doReturn(1205).when(xmlRpcRequest0).getParameterCount();
      try { 
        xmlRpcWriter0.write(xmlRpcRequest0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      assertNotNull(defaultHandler0);
      
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler0, typeFactoryImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNotNull(xmlRpcWriter0);
      
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn((String) null).when(xmlRpcRequest0).getMethodName();
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write(xmlRpcRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNotNull(xmlRpcWriter0);
      
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 1, "VCE", (Throwable) null);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      assertNotNull(defaultHandler0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler0, typeFactoryImpl0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertNotNull(xmlRpcWriter0);
      
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, (Object) defaultHandler0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Unsupported Java type: org.xml.sax.helpers.DefaultHandler
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      assertNotNull(xMLReaderAdapter0);
      
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      assertNotNull(parserAdapter0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcWriter0);
      
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 2160, (String) null);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertTrue(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertTrue(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNotNull(xmlRpcWriter0);
      
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 76, "http://ws.apache.org/xmlrpc/namespaces/extensions", (Throwable) mockThrowable0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertTrue(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNotNull(xmlRpcWriter0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 1, "izd$", (Throwable) mockException0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNotNull(xmlRpcWriter0);
      
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertTrue(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, (Object) "http://ws.apache.org/xmlrpc/namespaces/extensions");
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertTrue(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      assertNotNull(xMLFilterImpl0);
      
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      assertNotNull(typeFactoryImpl0);
      
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNotNull(xmlRpcWriter0);
      
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, (Object) "http://ws.apache.org/xmlrpc/namespaces/extensions");
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("http://ws.apache.org/xmlrpc/namespaces/extensions").when(xmlRpcRequest0).getMethodName();
      doReturn((Object) null).when(xmlRpcRequest0).getParameter(anyInt());
      doReturn(1).when(xmlRpcRequest0).getParameterCount();
      xmlRpcWriter0.write(xmlRpcRequest0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("http://ws.apache.org/xmlrpc/namespaces/extensions").when(xmlRpcRequest0).getMethodName();
      doReturn("", (ChronoLocalDate) null, (ChronoLocalDate) null, (String) null, localDate0).when(xmlRpcRequest0).getParameter(anyInt());
      doReturn(467).when(xmlRpcRequest0).getParameterCount();
      // Undeclared exception!
      xmlRpcWriter0.write(xmlRpcRequest0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, (ContentHandler) null, typeFactoryImpl0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 1167, "h90");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, xMLFilterImpl0, typeFactoryImpl0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      SAXParseException sAXParseException0 = new SAXParseException("", (String) null, (String) null, (-1), 58);
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, (-723), (String) null, (Throwable) sAXParseException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.MapSerializer", e);
      }
  }
}
