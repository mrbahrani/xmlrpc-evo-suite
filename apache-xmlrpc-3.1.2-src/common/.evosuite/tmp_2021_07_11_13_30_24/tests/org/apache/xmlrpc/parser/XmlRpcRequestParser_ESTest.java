/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 09:02:18 GMT 2021
 */

package org.apache.xmlrpc.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.xmlrpc.common.TypeFactory;
import org.apache.xmlrpc.common.TypeFactoryImpl;
import org.apache.xmlrpc.common.XmlRpcController;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcStreamConfig;
import org.apache.xmlrpc.parser.XmlRpcRequestParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcRequestParser_ESTest extends XmlRpcRequestParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.startElement("", (String) null, (String) null, attributesImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, (TypeFactory) null);
      char[] charArray0 = new char[7];
      try { 
        xmlRpcRequestParser0.characters(charArray0, 0, 4);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Unexpected non-whitespace character data
         //
         verifyException("org.apache.xmlrpc.parser.TypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.characters((char[]) null, 2676, 2676);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.TypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser((XmlRpcStreamConfig) null, typeFactoryImpl0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.characters(charArray0, 84, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 84
         //
         verifyException("org.apache.xmlrpc.parser.TypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      try { 
        xmlRpcRequestParser0.endElement("Ej=CS52*T[Gb*>jg", "Ej=CS52*T[Gb*>jg", "Ej=CS52*T[Gb*>jg");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Invalid state: Not inside value tag.
         //
         verifyException("org.apache.xmlrpc.parser.RecursiveTypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      try { 
        xmlRpcRequestParser0.startElement("j", "j", "j", attributes2Impl0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Expected root element 'methodCall', got {j}j
         //
         verifyException("org.apache.xmlrpc.parser.XmlRpcRequestParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      try { 
        xmlRpcRequestParser0.startElement("", "Thgpef6xn", (String) null, attributesImpl0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Expected root element 'methodCall', got Thgpef6xn
         //
         verifyException("org.apache.xmlrpc.parser.XmlRpcRequestParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      char[] charArray0 = new char[3];
      xmlRpcRequestParser0.characters(charArray0, '\u0000', (-4375));
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      List list0 = xmlRpcRequestParser0.getParams();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcRequestParser0.startDocument();
      assertNull(xmlRpcRequestParser0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      String string0 = xmlRpcRequestParser0.getMethodName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.addResult(".peI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.XmlRpcRequestParser", e);
      }
  }
}
