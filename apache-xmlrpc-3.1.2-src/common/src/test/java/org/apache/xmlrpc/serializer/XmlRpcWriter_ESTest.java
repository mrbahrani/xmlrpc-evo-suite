/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 12:05:08 GMT 2021
 */

package org.apache.xmlrpc.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ws.commons.util.NamespaceContextImpl;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.XmlRpcRequestConfig;
import org.apache.xmlrpc.common.TypeFactory;
import org.apache.xmlrpc.common.TypeFactoryImpl;
import org.apache.xmlrpc.common.XmlRpcController;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcStreamConfig;
import org.apache.xmlrpc.parser.TypeParser;
import org.apache.xmlrpc.serializer.XmlRpcWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcWriter_ESTest extends XmlRpcWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler0, typeFactoryImpl0);
      xmlRpcWriter0.writeValue("The StringBuffer argument must not be null.");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      TypeParser typeParser0 = typeFactoryImpl0.getParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, "", "dateTime.iso8601");
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, typeParser0, typeFactoryImpl0);
      try { 
        xmlRpcWriter0.writeValue("dateTime.iso8601");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Failed to parse date value java.lang.String@0000000007 at position 0
         //
         verifyException("org.apache.xmlrpc.parser.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      try { 
        xmlRpcWriter0.writeValue(xMLFilterImpl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Unsupported Java type: org.xml.sax.helpers.XMLFilterImpl
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, (ContentHandler) null, typeFactoryImpl0);
      // Undeclared exception!
      try { 
        xmlRpcWriter0.writeValue("The ParsePosition argument must not be null.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.TypeSerializerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, (ContentHandler) null, typeFactoryImpl0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      TypeParser typeParser0 = typeFactoryImpl0.getParser((XmlRpcStreamConfig) null, namespaceContextImpl0, "", "dateTime.iso8601");
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, typeParser0, typeFactoryImpl0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      MockThrowable mockThrowable0 = new MockThrowable();
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 84, "27}", (Throwable) mockThrowable0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Unexpected start tag in atomic element: fault
         //
         verifyException("org.apache.xmlrpc.parser.AtomicParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, xMLReaderAdapter0, typeFactoryImpl0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("nil").when(xmlRpcRequest0).getMethodName();
      doReturn("nil", (Object) null).when(xmlRpcRequest0).getParameter(anyInt());
      doReturn(343).when(xmlRpcRequest0).getParameterCount();
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write(xmlRpcRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLReaderAdapter0, (TypeFactory) null);
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 543, "DC({lmA;z`>\"2YHqLba", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler0, typeFactoryImpl0);
      Object object0 = new Object();
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, object0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Unsupported Java type: java.lang.Object
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      xmlRpcHttpRequestConfigImpl0.setEnabledForExceptions(true);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler2_0, typeFactoryImpl0);
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      SAXParseException sAXParseException0 = new SAXParseException("http://ws.apache.org/xmlrpc/namespaces/extensions", "http://ws.apache.org/xmlrpc/namespaces/extensions", "http://ws.apache.org/xmlrpc/namespaces/extensions", 329, 329);
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 329, "LvcRd", (Throwable) sAXParseException0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler2_0, typeFactoryImpl0);
      MockThrowable mockThrowable0 = new MockThrowable();
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 319, (String) null, (Throwable) mockThrowable0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler2_0, typeFactoryImpl0);
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      SAXParseException sAXParseException0 = new SAXParseException("http://ws.apache.org/xmlrpc/namespaces/extensions", "http://ws.apache.org/xmlrpc/namespaces/extensions", "http://ws.apache.org/xmlrpc/namespaces/extensions", 329, 329);
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 329, "LvcRd", (Throwable) sAXParseException0);
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler2_0, typeFactoryImpl0);
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, 319, "http://ws.apache.org/xmlrpc/namespaces/extensions");
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, xMLReaderAdapter0, typeFactoryImpl0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, (Object) "http://ws.apache.org/xmlrpc/namespaces/extensions");
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler2_0, typeFactoryImpl0);
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      xmlRpcWriter0.write((XmlRpcRequestConfig) xmlRpcHttpRequestConfigImpl0, (Object) "LvcRd");
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, xMLFilterImpl0, typeFactoryImpl0);
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("http://ws.apache.org/xmlrpc/namespaces/extensions").when(xmlRpcRequest0).getMethodName();
      doReturn("http://ws.apache.org/xmlrpc/namespaces/extensions", (Object) null).when(xmlRpcRequest0).getParameter(anyInt());
      doReturn(1941).when(xmlRpcRequest0).getParameterCount();
      try { 
        xmlRpcWriter0.write(xmlRpcRequest0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter(xmlRpcHttpRequestConfigImpl0, defaultHandler0, typeFactoryImpl0);
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("http://ws.apache.org/xmlrpc/namespaces/extensions").when(xmlRpcRequest0).getMethodName();
      doReturn((-3929)).when(xmlRpcRequest0).getParameterCount();
      xmlRpcWriter0.write(xmlRpcRequest0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, (ContentHandler) null, typeFactoryImpl0);
      // Undeclared exception!
      try { 
        xmlRpcWriter0.write((XmlRpcRequestConfig) null, (-1294), "serializable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.serializer.XmlRpcWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcWriter xmlRpcWriter0 = new XmlRpcWriter((XmlRpcStreamConfig) null, xMLReaderAdapter0, typeFactoryImpl0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("njb7{ ?jFg=}]").when(xmlRpcRequest0).getMethodName();
      doReturn(0).when(xmlRpcRequest0).getParameterCount();
      xmlRpcWriter0.write(xmlRpcRequest0);
  }
}
