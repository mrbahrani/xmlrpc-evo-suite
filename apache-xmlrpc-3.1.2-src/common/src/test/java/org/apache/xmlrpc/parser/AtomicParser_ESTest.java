/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:26:45 GMT 2021
 */

package org.apache.xmlrpc.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.Format;
import org.apache.xmlrpc.parser.BigIntegerParser;
import org.apache.xmlrpc.parser.BooleanParser;
import org.apache.xmlrpc.parser.DateParser;
import org.apache.xmlrpc.parser.DoubleParser;
import org.apache.xmlrpc.parser.FloatParser;
import org.apache.xmlrpc.parser.NullParser;
import org.apache.xmlrpc.parser.StringParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomicParser_ESTest extends AtomicParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigIntegerParser bigIntegerParser0 = new BigIntegerParser();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      bigIntegerParser0.startElement("", "org.apache.xmlrpc.parser.AtomicParser", "", attributes2Impl0);
      try { 
        bigIntegerParser0.startElement("", "", "9H?", (Attributes) null);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Unexpected start tag in atomic element: 
         //
         verifyException("org.apache.xmlrpc.parser.AtomicParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanParser booleanParser0 = new BooleanParser();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      booleanParser0.startElement("9ULmZZ JnpxQp)L.yo3", "Failed to parse date value: ", "By)5r`EvNSI`sd}U", attributes2Impl0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        booleanParser0.characters(charArray0, (-1), 1712);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateParser dateParser0 = new DateParser((Format) null);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      dateParser0.startElement("O7G$n?.%bU6&u0GSf", "O7G$n?.%bU6&u0GSf", "L,", attributes2Impl0);
      dateParser0.endElement("r_ F9jc5", "", "r_ F9jc5");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigIntegerParser bigIntegerParser0 = new BigIntegerParser();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      bigIntegerParser0.startElement("", "", "", attributes2Impl0);
      bigIntegerParser0.sb = null;
      // Undeclared exception!
      try { 
        bigIntegerParser0.endElement("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.AtomicParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringParser stringParser0 = new StringParser();
      // Undeclared exception!
      try { 
        stringParser0.endElement("org.apache.xmlrpc.parser.I2Parser", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullParser nullParser0 = new NullParser();
      // Undeclared exception!
      try { 
        nullParser0.characters((char[]) null, 0, 1082);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.TypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigIntegerParser bigIntegerParser0 = new BigIntegerParser();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      bigIntegerParser0.startElement("", "", "", attributes2Impl0);
      // Undeclared exception!
      try { 
        bigIntegerParser0.startElement("", (String) null, "", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigIntegerParser bigIntegerParser0 = new BigIntegerParser();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      bigIntegerParser0.startElement("", "", "", attributes2Impl0);
      try { 
        bigIntegerParser0.endElement("", "", "");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Failed to parse BigInteger value: 
         //
         verifyException("org.apache.xmlrpc.parser.BigIntegerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FloatParser floatParser0 = new FloatParser();
      try { 
        floatParser0.endElement("zKwa[w#@3Dg-", "Unexpected end tag in atomic element: ", ";n2'~p]p;");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Unexpected end tag in atomic element: {zKwa[w#@3Dg-}Unexpected end tag in atomic element: 
         //
         verifyException("org.apache.xmlrpc.parser.AtomicParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleParser doubleParser0 = new DoubleParser();
      char[] charArray0 = new char[9];
      doubleParser0.characters(charArray0, (-5), (-5));
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FloatParser floatParser0 = new FloatParser();
      floatParser0.startDocument();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigIntegerParser bigIntegerParser0 = new BigIntegerParser();
      char[] charArray0 = new char[2];
      try { 
        bigIntegerParser0.characters(charArray0, 1, 1);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Unexpected non-whitespace characters
         //
         verifyException("org.apache.xmlrpc.parser.AtomicParser", e);
      }
  }
}
