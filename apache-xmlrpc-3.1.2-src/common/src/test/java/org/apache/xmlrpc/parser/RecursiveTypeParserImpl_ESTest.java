/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:23:59 GMT 2021
 */

package org.apache.xmlrpc.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ws.commons.util.NamespaceContextImpl;
import org.apache.xmlrpc.common.TypeFactory;
import org.apache.xmlrpc.common.TypeFactoryImpl;
import org.apache.xmlrpc.common.XmlRpcController;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcStreamConfig;
import org.apache.xmlrpc.parser.MapParser;
import org.apache.xmlrpc.parser.ObjectArrayParser;
import org.apache.xmlrpc.parser.XmlRpcRequestParser;
import org.apache.xmlrpc.parser.XmlRpcResponseParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RecursiveTypeParserImpl_ESTest extends RecursiveTypeParserImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcRequestParser0.processingInstruction("Expected /name, got ", "GW0#t}T8{8MM");
      assertNull(xmlRpcRequestParser0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcResponseParser xmlRpcResponseParser0 = new XmlRpcResponseParser(xmlRpcHttpRequestConfigImpl0, (TypeFactory) null);
      char[] charArray0 = new char[2];
      xmlRpcResponseParser0.ignorableWhitespace(charArray0, (-167), 0);
      assertFalse(xmlRpcResponseParser0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcRequestParser0.startValueTag();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.characters(charArray0, 4281, (-3567));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startDocument();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser((XmlRpcStreamConfig) null, typeFactoryImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      try { 
        xmlRpcRequestParser0.startElement("", "jdzAIAV>bH", "jdzAIAV>bH", attributes2Impl0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Expected root element 'methodCall', got jdzAIAV>bH
         //
         verifyException("org.apache.xmlrpc.parser.XmlRpcRequestParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.startElement("", (String) null, (String) null, attributes2Impl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      XmlRpcResponseParser xmlRpcResponseParser0 = new XmlRpcResponseParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcResponseParser0.startValueTag();
      // Undeclared exception!
      try { 
        xmlRpcResponseParser0.ignorableWhitespace((char[]) null, '\\', 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcRequestParser0.startValueTag();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.ignorableWhitespace(charArray0, (-3324), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcRequestParser0.startValueTag();
      // Undeclared exception!
      try { 
        xmlRpcRequestParser0.endValueTag();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.XmlRpcRequestParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcResponseParser xmlRpcResponseParser0 = new XmlRpcResponseParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcResponseParser0.startValueTag();
      // Undeclared exception!
      try { 
        xmlRpcResponseParser0.endValueTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Map
         //
         verifyException("org.apache.xmlrpc.parser.XmlRpcResponseParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      try { 
        xmlRpcRequestParser0.endElement((String) null, (String) null, (String) null);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Invalid state: Not inside value tag.
         //
         verifyException("org.apache.xmlrpc.parser.RecursiveTypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      MapParser mapParser0 = new MapParser((XmlRpcStreamConfig) null, namespaceContextImpl0, typeFactoryImpl0);
      char[] charArray0 = new char[9];
      try { 
        mapParser0.characters(charArray0, 0, 1010);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Unexpected non-whitespace character data
         //
         verifyException("org.apache.xmlrpc.parser.TypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcResponseParser xmlRpcResponseParser0 = new XmlRpcResponseParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      // Undeclared exception!
      try { 
        xmlRpcResponseParser0.characters((char[]) null, 58, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.TypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      char[] charArray0 = new char[3];
      objectArrayParser0.characters(charArray0, (-2789), (-2789));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcRequestParser0.endPrefixMapping("");
      assertNull(xmlRpcRequestParser0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startPrefixMapping("RF", "w-,^1%E? #j");
      assertEquals(0, namespaceContextImpl0.getContext());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      try { 
        objectArrayParser0.skippedEntity("/h{`1e]m':`<Dvq(C");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Don't know how to handle entity /h{`1e]m':`<Dvq(C
         //
         verifyException("org.apache.xmlrpc.parser.TypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      XmlRpcResponseParser xmlRpcResponseParser0 = new XmlRpcResponseParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      xmlRpcResponseParser0.startValueTag();
      try { 
        xmlRpcResponseParser0.endElement("%ByIE_>yE=Z/M<", "%ByIE_>yE=Z/M<", "%ByIE_>yE=Z/M<");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Invalid state: No type parser configured.
         //
         verifyException("org.apache.xmlrpc.parser.RecursiveTypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      MapParser mapParser0 = new MapParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      mapParser0.startValueTag();
      try { 
        mapParser0.endValueTag();
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Invalid state: Expected name
         //
         verifyException("org.apache.xmlrpc.parser.MapParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcRequestParser xmlRpcRequestParser0 = new XmlRpcRequestParser(xmlRpcHttpRequestConfigImpl0, typeFactoryImpl0);
      try { 
        xmlRpcRequestParser0.endValueTag();
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Invalid state: Not inside value tag.
         //
         verifyException("org.apache.xmlrpc.parser.RecursiveTypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startValueTag();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        objectArrayParser0.characters(charArray0, 997, 997);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
