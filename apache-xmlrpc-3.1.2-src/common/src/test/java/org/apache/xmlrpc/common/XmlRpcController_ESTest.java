/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:34:17 GMT 2021
 */

package org.apache.xmlrpc.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.xmlrpc.XmlRpcConfig;
import org.apache.xmlrpc.common.TypeFactory;
import org.apache.xmlrpc.common.TypeFactoryImpl;
import org.apache.xmlrpc.common.XmlRpcController;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcWorkerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcController_ESTest extends XmlRpcController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      xmlRpcController1.setTypeFactory(typeFactoryImpl0);
      TypeFactory typeFactory0 = xmlRpcController1.getTypeFactory();
      assertSame(typeFactory0, typeFactoryImpl0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      xmlRpcController1.setMaxThreads(14);
      int int0 = xmlRpcController1.getMaxThreads();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      xmlRpcController1.setMaxThreads((-1339));
      int int0 = xmlRpcController1.getMaxThreads();
      assertEquals((-1339), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      doReturn((XmlRpcConfig) null).when(xmlRpcController0).getConfig();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      XmlRpcConfig xmlRpcConfig0 = xmlRpcController1.getConfig();
      assertNull(xmlRpcConfig0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcController0).getConfig();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl1 = (XmlRpcHttpRequestConfigImpl)xmlRpcController1.getConfig();
      assertFalse(xmlRpcHttpRequestConfigImpl1.isGzipRequesting());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      doReturn(xmlRpcHttpRequestConfigImpl0).when(xmlRpcController0).getConfig();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      XmlRpcConfig xmlRpcConfig0 = xmlRpcController1.getConfig();
      assertFalse(xmlRpcConfig0.isEnabledForExtensions());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      XmlRpcWorkerFactory xmlRpcWorkerFactory0 = xmlRpcController1.getWorkerFactory();
      assertNull(xmlRpcWorkerFactory0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      xmlRpcController1.setWorkerFactory((XmlRpcWorkerFactory) null);
      assertSame(xmlRpcController1, xmlRpcController0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      TypeFactory typeFactory0 = xmlRpcController1.getTypeFactory();
      assertNull(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, CALLS_REAL_METHODS);
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      XmlRpcController xmlRpcController1 = typeFactoryImpl0.getController();
      int int0 = xmlRpcController1.getMaxThreads();
      assertEquals(0, int0);
  }
}
