/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:23:51 GMT 2021
 */

package org.apache.xmlrpc.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ws.commons.util.NamespaceContextImpl;
import org.apache.xmlrpc.common.TypeFactoryImpl;
import org.apache.xmlrpc.common.XmlRpcController;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.parser.ObjectArrayParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectArrayParser_ESTest extends ObjectArrayParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startElement("", "array", "` `%$`#I", attributes2Impl0);
      try { 
        objectArrayParser0.startElement("", "CDATA", "n\"XwtJio>X&Za$mig", attributes2Impl0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Expected data element, got CDATA
         //
         verifyException("org.apache.xmlrpc.parser.ObjectArrayParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      try { 
        objectArrayParser0.endElement("Expected data element, got ", "", "cvv6!FfcaWTM;$5");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Invalid state: Not inside value tag.
         //
         verifyException("org.apache.xmlrpc.parser.RecursiveTypeParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startDocument();
      objectArrayParser0.startElement("", "array", "` `%$`#I", attributes2Impl0);
      objectArrayParser0.endElement(",k@<aR`s'LR9XH", "n\"XwtJio>X&Za$mig", "Unable to parse namespace declaration: ");
      try { 
        objectArrayParser0.startElement("Unable to parse namespace declaration: ", ",k@<aR`s'LR9XH", "9", attributes2Impl0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Expected array element, got {Unable to parse namespace declaration: },k@<aR`s'LR9XH
         //
         verifyException("org.apache.xmlrpc.parser.ObjectArrayParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startDocument();
      Object object0 = new Object();
      objectArrayParser0.addResult(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startElement("", "array", (String) null, attributes2Impl0);
      try { 
        objectArrayParser0.startElement("t", "The prefix ", (String) null, attributes2Impl0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Expected data element, got {t}The prefix 
         //
         verifyException("org.apache.xmlrpc.parser.ObjectArrayParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      try { 
        objectArrayParser0.startElement("", "aqray", "aqray", attributes2Impl0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // Expected array element, got aqray
         //
         verifyException("org.apache.xmlrpc.parser.ObjectArrayParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, (NamespaceContextImpl) null, typeFactoryImpl0);
      // Undeclared exception!
      try { 
        objectArrayParser0.startElement("S/arw;@Oz", (String) null, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      XmlRpcController xmlRpcController0 = mock(XmlRpcController.class, new ViolatedAssumptionAnswer());
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl(xmlRpcController0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      objectArrayParser0.startElement("", "array", "array", attributes2Impl0);
      // Undeclared exception!
      try { 
        objectArrayParser0.endElement("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.ObjectArrayParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      NamespaceContextImpl namespaceContextImpl0 = new NamespaceContextImpl();
      TypeFactoryImpl typeFactoryImpl0 = new TypeFactoryImpl((XmlRpcController) null);
      ObjectArrayParser objectArrayParser0 = new ObjectArrayParser(xmlRpcHttpRequestConfigImpl0, namespaceContextImpl0, typeFactoryImpl0);
      // Undeclared exception!
      try { 
        objectArrayParser0.addResult((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.parser.ObjectArrayParser", e);
      }
  }
}
