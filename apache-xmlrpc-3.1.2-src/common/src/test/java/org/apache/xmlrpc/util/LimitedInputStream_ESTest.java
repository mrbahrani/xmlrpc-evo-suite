/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:25:39 GMT 2021
 */

package org.apache.xmlrpc.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.xmlrpc.util.LimitedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LimitedInputStream_ESTest extends LimitedInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(sequenceInputStream0, (-1389));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration1).hasMoreElements();
      doReturn(limitedInputStream0).when(enumeration1).nextElement();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      LimitedInputStream limitedInputStream1 = new LimitedInputStream(sequenceInputStream1, 2973);
      int int0 = limitedInputStream1.read();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-116);
      byteArray0[0] = byte0;
      byte byte1 = (byte)38;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-81);
      byteArray0[3] = byte3;
      limitedInputStream1.read(byteArray0, (int) byteArray0[0], int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)1);
      limitedInputStream0.read();
      assertEquals(7, byteArrayInputStream0.available());
      
      limitedInputStream0.reset();
      int int0 = limitedInputStream0.read(byteArray0, (int) (byte) (-29), (int) (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2996);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn(pipedInputStream0).when(enumeration0).nextElement();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(sequenceInputStream0, 2973);
      try { 
        limitedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O! }'");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "xSEjdHPO&Gz9sF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("/O! }'");
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(mockFileInputStream0, 2800);
      limitedInputStream0.read();
      limitedInputStream0.mark((-745));
      assertEquals(14, mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-19), (-1569));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(pushbackInputStream0, 1);
      limitedInputStream0.skip((byte)94);
      // Undeclared exception!
      try { 
        limitedInputStream0.read((byte[]) null, 1998, (-882));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 1);
      // Undeclared exception!
      try { 
        limitedInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, (-173));
      // Undeclared exception!
      try { 
        limitedInputStream0.skip(2097L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.util.LimitedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(dataInputStream0, 0);
      try { 
        limitedInputStream0.skip(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-29);
      byte byte0 = (byte)97;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)68);
      byte[] byteArray1 = new byte[1];
      byteArrayInputStream0.read(byteArray1);
      byteArray1[0] = (byte) (-40);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-40);
      byteArrayInputStream0.markSupported();
      byteArray2[1] = (byte) (-29);
      // Undeclared exception!
      try { 
        limitedInputStream0.read(byteArray2, 0, 2148);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      int int0 = 1;
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(bufferedInputStream0, 1);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        limitedInputStream0.read((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-1);
      pipedOutputStream0.write(byteArray0);
      int int0 = (-910);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(pipedInputStream0, (-910));
      try { 
        limitedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)0);
      long long0 = limitedInputStream0.skip((byte)51);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(bufferedInputStream0, (byte)0);
      long long0 = limitedInputStream0.skip((byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(pushbackInputStream0, 0);
      pushbackInputStream0.skip((byte)1);
      limitedInputStream0.read();
      limitedInputStream0.read(byteArray0, (int) (byte) (-20), (int) (byte) (-20));
      limitedInputStream0.mark(1619);
      limitedInputStream0.read();
      int int0 = limitedInputStream0.read();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0);
      // Undeclared exception!
      try { 
        limitedInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.util.LimitedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, 0);
      boolean boolean0 = limitedInputStream0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 0);
      limitedInputStream0.reset();
      assertTrue(limitedInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, (-1));
      int int0 = limitedInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, (-1));
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        limitedInputStream0.mark((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.util.LimitedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, (-5215));
      // Undeclared exception!
      try { 
        limitedInputStream0.mark(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.util.LimitedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)10);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)10;
      limitedInputStream0.read(byteArray1);
      boolean boolean0 = limitedInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-115);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)8, (-4098));
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte) (-32));
      boolean boolean0 = limitedInputStream0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-3038));
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.read();
      long long0 = limitedInputStream0.skip(0L);
      assertEquals((-3038L), long0);
      
      limitedInputStream0.read();
      limitedInputStream0.reset();
      limitedInputStream0.mark((-1));
      byteArrayInputStream0.read(byteArray0);
      limitedInputStream0.reset();
      int int0 = limitedInputStream0.read(byteArray0, 0, 0);
      int int1 = limitedInputStream0.read();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LimitedInputStream limitedInputStream0 = new LimitedInputStream((InputStream) null, (-5213));
      // Undeclared exception!
      try { 
        limitedInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.util.LimitedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)30;
      byteArray0[3] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)55, (-3492));
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(byteArrayInputStream0, (byte)30);
      // Undeclared exception!
      try { 
        limitedInputStream0.read(byteArray0, 738, (int) (byte)123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(pipedInputStream0, (-379));
      pipedInputStream0.close();
      LimitedInputStream limitedInputStream1 = new LimitedInputStream(limitedInputStream0, 1);
      byte[] byteArray0 = new byte[7];
      limitedInputStream1.read(byteArray0, 2299, (int) (byte) (-1));
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)40;
      limitedInputStream1.read(byteArray0);
      limitedInputStream0.skip(0L);
      limitedInputStream0.skip(0L);
      try { 
        pipedInputStream0.skip(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      LimitedInputStream limitedInputStream0 = new LimitedInputStream(sequenceInputStream0, 1907);
      limitedInputStream0.read();
      limitedInputStream0.skip((-1));
      try { 
        limitedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }
}
