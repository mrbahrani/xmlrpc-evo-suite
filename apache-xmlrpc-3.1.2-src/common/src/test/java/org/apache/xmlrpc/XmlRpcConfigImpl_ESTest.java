/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:34:52 GMT 2021
 */

package org.apache.xmlrpc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.TimeZone;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcConfigImpl_ESTest extends XmlRpcConfigImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setEnabledForExtensions(true);
      boolean boolean0 = xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      boolean boolean0 = xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setContentLengthOptional(true);
      boolean boolean0 = xmlRpcHttpRequestConfigImpl0.isContentLengthOptional();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      boolean boolean0 = xmlRpcHttpRequestConfigImpl0.isContentLengthOptional();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setTimeZone((TimeZone) null);
      TimeZone timeZone0 = xmlRpcHttpRequestConfigImpl0.getTimeZone();
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setEncoding("Cst");
      String string0 = xmlRpcHttpRequestConfigImpl0.getEncoding();
      assertEquals("Cst", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setEncoding("");
      String string0 = xmlRpcHttpRequestConfigImpl0.getEncoding();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setBasicEncoding(".TKJ&=;@F0@\"/^");
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicEncoding();
      assertEquals(".TKJ&=;@F0@\"/^", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setBasicEncoding("");
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicEncoding();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      String string0 = xmlRpcHttpRequestConfigImpl0.getEncoding();
      assertNull(string0);
  }
}
