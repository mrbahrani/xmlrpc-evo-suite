/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:34:46 GMT 2021
 */

package org.apache.xmlrpc.common;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcHttpRequestConfigImpl_ESTest extends XmlRpcHttpRequestConfigImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setGzipCompressing(true);
      boolean boolean0 = xmlRpcHttpRequestConfigImpl0.isGzipCompressing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setEnabledForExceptions(true);
      boolean boolean0 = xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      
      xmlRpcHttpRequestConfigImpl0.setReplyTimeout(1);
      int int0 = xmlRpcHttpRequestConfigImpl0.getReplyTimeout();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setReplyTimeout((-1019));
      int int0 = xmlRpcHttpRequestConfigImpl0.getReplyTimeout();
      assertEquals((-1019), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      
      xmlRpcHttpRequestConfigImpl0.setConnectionTimeout(1);
      int int0 = xmlRpcHttpRequestConfigImpl0.getConnectionTimeout();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setConnectionTimeout((-4091));
      int int0 = xmlRpcHttpRequestConfigImpl0.getConnectionTimeout();
      assertEquals((-4091), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setBasicUserName("org.apache.xmlrpc.XmlRpcConfigImpl");
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicUserName();
      assertEquals("org.apache.xmlrpc.XmlRpcConfigImpl", string0);
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setBasicPassword("");
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicPassword();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertEquals("", string0);
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicPassword();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(string0);
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setBasicPassword("org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl");
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicPassword();
      assertEquals("org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl", string0);
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.isGzipRequesting();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setBasicUserName("");
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicUserName();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      int int0 = xmlRpcHttpRequestConfigImpl0.getReplyTimeout();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.isGzipCompressing();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      String string0 = xmlRpcHttpRequestConfigImpl0.getBasicUserName();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setGzipRequesting(true);
      boolean boolean0 = xmlRpcHttpRequestConfigImpl0.isGzipRequesting();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      int int0 = xmlRpcHttpRequestConfigImpl0.getConnectionTimeout();
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertEquals(0, int0);
  }
}
