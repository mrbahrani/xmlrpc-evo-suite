/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:21:59 GMT 2021
 */

package org.apache.xmlrpc.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.StringTokenizer;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.util.HttpUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUtil_ESTest extends HttpUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      HttpUtil.parseAuthorization(xmlRpcHttpRequestConfigImpl0, "ljO |FM%-nzip");
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)59, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      try { 
        HttpUtil.readLine(byteArrayInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP Header too long
         //
         verifyException("org.apache.xmlrpc.util.HttpUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = HttpUtil.getNonIdentityTransferEncoding(",*9}]]dXz:Fc>ex~");
      assertNotNull(string0);
      assertEquals("*9}]]dXz:Fc>ex~", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = HttpUtil.isUsingGzipEncoding("[m,7S<lr23;g`gyRF>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("qr^>,$", "Ak-^`", true);
      assertEquals(3, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      boolean boolean0 = HttpUtil.isUsingGzipEncoding((Enumeration) stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl";
      String string1 = "I4n,?R}4XZB0++FXW1!";
      try { 
        HttpUtil.encodeBasicAuthentication(string0, string1, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = HttpUtil.getNonIdentityTransferEncoding(";p&-w");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        HttpUtil.readLine((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.util.HttpUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-282), (byte)101);
      assertEquals(101, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        HttpUtil.readLine(byteArrayInputStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -282
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = HttpUtil.isUsingGzipEncoding((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      HttpUtil.parseAuthorization(xmlRpcHttpRequestConfigImpl0, "basic");
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      HttpUtil.parseAuthorization(xmlRpcHttpRequestConfigImpl0, "");
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      
      HttpUtil.parseAuthorization(xmlRpcHttpRequestConfigImpl0, (String) null);
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string0 = HttpUtil.readLine(byteArrayInputStream0, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string0 = HttpUtil.readLine(byteArrayInputStream0, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn("gzip").when(enumeration0).nextElement();
      boolean boolean0 = HttpUtil.isUsingGzipEncoding(enumeration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = HttpUtil.isUsingGzipEncoding((Enumeration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = HttpUtil.getNonIdentityTransferEncoding("identity");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = HttpUtil.getNonIdentityTransferEncoding("N:;d:@xUU~");
      assertEquals("N:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = HttpUtil.getNonIdentityTransferEncoding((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = HttpUtil.isUsingGzipEncoding("gzip");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = HttpUtil.encodeBasicAuthentication("UTF-8", "UTF-8", (String) null);
      assertEquals("VVRGLTg6VVRGLTg=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = HttpUtil.encodeBasicAuthentication((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpUtil httpUtil0 = new HttpUtil();
  }
}
