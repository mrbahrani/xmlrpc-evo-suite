/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 09:07:00 GMT 2021
 */

package org.apache.xmlrpc.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfig;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.XmlRpcClientRequestImpl;
import org.apache.xmlrpc.client.XmlRpcLocalTransport;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcLocalTransport_ESTest extends XmlRpcLocalTransport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcLocalTransport0.sendRequest((XmlRpcRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport((XmlRpcClient) null);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl cannot be cast to org.apache.xmlrpc.client.XmlRpcLocalClientConfig
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      xmlRpcClientConfigImpl0.setEnabledForExtensions(true);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "", (Object[]) null);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to invoke method : null
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Ztv3nGI)%(3";
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Ztv3nGI)%(3", objectArray0);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter 1 has invalid type, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      LinkedList<Date> linkedList0 = new LinkedList<Date>();
      MockDate mockDate0 = new MockDate();
      linkedList0.offerLast(mockDate0);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, ":~w8niM&MoN4W TQ@.(", linkedList0);
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to invoke method :~w8niM&MoN4W TQ@.(: null
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      HashMap<ChronoLocalDate, Integer>[] hashMapArray0 = (HashMap<ChronoLocalDate, Integer>[]) Array.newInstance(HashMap.class, 7);
      HashMap<ChronoLocalDate, Integer> hashMap0 = new HashMap<ChronoLocalDate, Integer>();
      hashMapArray0[0] = hashMap0;
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      JapaneseDate japaneseDate0 = MockJapaneseDate.now((ZoneId) zoneOffset0);
      Integer integer0 = new Integer((-1));
      hashMap0.put(japaneseDate0, integer0);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "", hashMapArray0);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter 0 has invalid type, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) linkedList0;
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "Z61L", objectArray0);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter 0 has invalid type, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1501.950666225993);
      linkedList0.add(double0);
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedList0;
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "Z6mL", objectArray0);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter 1 has invalid type, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      HashMap<ChronoLocalDate, Integer>[] hashMapArray0 = (HashMap<ChronoLocalDate, Integer>[]) Array.newInstance(HashMap.class, 7);
      HashMap<ChronoLocalDate, Integer> hashMap0 = new HashMap<ChronoLocalDate, Integer>();
      hashMapArray0[0] = hashMap0;
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "", hashMapArray0);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter 1 has invalid type, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLocalTransport xmlRpcLocalTransport0 = new XmlRpcLocalTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1016);
      linkedList0.push(integer0);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "|];1`7*Y=wr[JxI<I", linkedList0);
      try { 
        xmlRpcLocalTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to invoke method |];1`7*Y=wr[JxI<I: null
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLocalTransport", e);
      }
  }
}
