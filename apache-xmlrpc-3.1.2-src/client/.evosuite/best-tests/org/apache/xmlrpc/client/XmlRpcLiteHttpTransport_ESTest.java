/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 10:37:11 GMT 2021
 */

package org.apache.xmlrpc.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.XmlRpcRequestConfig;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.XmlRpcHttpClientConfig;
import org.apache.xmlrpc.client.XmlRpcLiteHttpTransport;
import org.apache.xmlrpc.client.XmlRpcStreamTransport;
import org.apache.xmlrpc.common.TypeFactory;
import org.apache.xmlrpc.serializer.XmlWriterFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcLiteHttpTransport_ESTest extends XmlRpcLiteHttpTransport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      boolean boolean0 = xmlRpcLiteHttpTransport0.isUsingByteArrayOutput(xmlRpcClientConfigImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcClientConfigImpl0).when(xmlRpcRequest0).getConfig();
      // Undeclared exception!
      try { 
        xmlRpcLiteHttpTransport0.sendRequest(xmlRpcRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcRequestConfig xmlRpcRequestConfig0 = mock(XmlRpcRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcRequestConfig0).when(xmlRpcRequest0).getConfig();
      // Undeclared exception!
      try { 
        xmlRpcLiteHttpTransport0.sendRequest(xmlRpcRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.XmlRpcRequestConfig$MockitoMock$1025007913 cannot be cast to org.apache.xmlrpc.client.XmlRpcHttpClientConfig
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLiteHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcLiteHttpTransport0.newSocket(false, "4=TCn\u0004", (-2471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2471
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcLiteHttpTransport0.isUsingByteArrayOutput((XmlRpcHttpClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcLiteHttpTransport0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLiteHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      try { 
        xmlRpcLiteHttpTransport0.newSocket(true, "Apache XML RPC 3.0", (-1660));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create SSL connections, use the XmlRpcLite14HttpTransportFactory.
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLiteHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      xmlRpcLiteHttpTransport0.close();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      xmlRpcLiteHttpTransport0.setRequestHeader("", "");
      xmlRpcLiteHttpTransport0.setRequestHeader("", "");
      xmlRpcLiteHttpTransport0.setRequestHeader("", "");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContentHandler contentHandler0 = mock(ContentHandler.class, new ViolatedAssumptionAnswer());
      XmlWriterFactory xmlWriterFactory0 = mock(XmlWriterFactory.class, new ViolatedAssumptionAnswer());
      doReturn(contentHandler0).when(xmlWriterFactory0).getXmlWriter(any(org.apache.xmlrpc.common.XmlRpcStreamConfig.class) , any(java.io.OutputStream.class));
      TypeFactory typeFactory0 = mock(TypeFactory.class, new ViolatedAssumptionAnswer());
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      doReturn(xmlWriterFactory0).when(xmlRpcClient0).getXmlWriterFactory();
      doReturn(typeFactory0).when(xmlRpcClient0).getTypeFactory();
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcRequest xmlRpcRequest0 = mock(XmlRpcRequest.class, new ViolatedAssumptionAnswer());
      doReturn(xmlRpcClientConfigImpl0, xmlRpcClientConfigImpl0, xmlRpcClientConfigImpl0).when(xmlRpcRequest0).getConfig();
      doReturn("Apache XML RPC 3.0").when(xmlRpcRequest0).getMethodName();
      doReturn(0).when(xmlRpcRequest0).getParameterCount();
      XmlRpcStreamTransport.ReqWriter xmlRpcStreamTransport_ReqWriter0 = xmlRpcLiteHttpTransport0.newReqWriter(xmlRpcRequest0);
      try { 
        xmlRpcLiteHttpTransport0.writeRequest(xmlRpcStreamTransport_ReqWriter0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to open connection to null:0: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@48eb9cdb
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLiteHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      boolean boolean0 = xmlRpcLiteHttpTransport0.isResponseGzipCompressed(xmlRpcClientConfigImpl0);
      assertFalse(boolean0);
  }
}
