/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 10:37:13 GMT 2021
 */

package org.apache.xmlrpc.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.LinkedList;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfig;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.XmlRpcClientRequestImpl;
import org.apache.xmlrpc.client.XmlRpcCommonsTransport;
import org.apache.xmlrpc.client.XmlRpcCommonsTransportFactory;
import org.apache.xmlrpc.client.XmlRpcLite14HttpTransport;
import org.apache.xmlrpc.client.XmlRpcLiteHttpTransport;
import org.apache.xmlrpc.client.XmlRpcLocalStreamTransport;
import org.apache.xmlrpc.client.XmlRpcStreamTransport;
import org.apache.xmlrpc.client.XmlRpcSun15HttpTransport;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcStreamRequestConfig;
import org.apache.xmlrpc.common.XmlRpcStreamRequestProcessor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcStreamTransport_ESTest extends XmlRpcStreamTransport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      LinkedList<XmlRpcHttpRequestConfigImpl> linkedList0 = new LinkedList<XmlRpcHttpRequestConfigImpl>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "pfV\"@x*", linkedList0);
      XmlRpcStreamTransport.ReqWriter xmlRpcStreamTransport_ReqWriter0 = xmlRpcLocalStreamTransport0.newReqWriter(xmlRpcClientRequestImpl0);
      XmlRpcStreamTransport.GzipReqWriter xmlRpcStreamTransport_GzipReqWriter0 = xmlRpcLocalStreamTransport0.new GzipReqWriter(xmlRpcStreamTransport_ReqWriter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 2053);
      xmlRpcStreamTransport_GzipReqWriter0.write(bufferedOutputStream0);
      assertEquals("\u001F\u2039\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00B3\u00B1\u00AF\u00C8\u00CDQ(K-*\u00CE\u00CC\u00CF\u00B3U2\u00D43PRH\u00CDK\u00CEO\u00C9\u00CCK\u00B7U\n\rq\u00D3\u00B5P\u00B2\u00B7\u00B3\u00C9M-\u00C9\u00C8OqN\u00CC\u00C9\uFFFD\u00B1\u00FD\u0012sS\u00ED\n\u00D2\u00C2\u201D\u001C*\u00B4l\u00F4\u2018\u00C4l\n\u0012\u2039\u0012s\u2039\u00F5\u00ED`\u00A2`]\u0000\u0011\u001E,\u00AFh\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(99, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory(xmlRpcClient0);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      XmlRpcStreamTransport.ReqWriterImpl xmlRpcStreamTransport_ReqWriterImpl0 = xmlRpcCommonsTransport0.new ReqWriterImpl(xmlRpcClientRequestImpl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      xmlRpcStreamTransport_ReqWriterImpl0.write(byteArrayOutputStream0);
      assertEquals(115, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcStreamTransport.GzipReqWriter xmlRpcStreamTransport_GzipReqWriter0 = xmlRpcLocalStreamTransport0.new GzipReqWriter((XmlRpcStreamTransport.ReqWriter) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        xmlRpcStreamTransport_GzipReqWriter0.write(pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to write request: Pipe not connected
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport$GzipReqWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XMLReader xMLReader0 = xmlRpcLiteHttpTransport0.newXMLReader();
      assertNotNull(xMLReader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, ",\"J+@h{.a}dKE?)", linkedList0);
      XmlRpcStreamTransport.ReqWriter xmlRpcStreamTransport_ReqWriter0 = xmlRpcLocalStreamTransport0.newReqWriter(xmlRpcClientRequestImpl0);
      assertNotNull(xmlRpcStreamTransport_ReqWriter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory((XmlRpcClient) null);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      boolean boolean0 = xmlRpcCommonsTransport0.isCompressingRequest(xmlRpcClientConfigImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", (Object[]) null);
      // Undeclared exception!
      try { 
        xmlRpcSun15HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport((XmlRpcClient) null, xmlRpcStreamRequestProcessor0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[2];
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "{W", objectArray0);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport$ReqWriterImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcSun15HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl cannot be cast to org.apache.xmlrpc.client.XmlRpcHttpClientConfig
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcSunHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLite14HttpTransport xmlRpcLite14HttpTransport0 = new XmlRpcLite14HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      try { 
        xmlRpcLite14HttpTransport0.readResponse(xmlRpcClientConfigImpl0, pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read server's response: Pipe not connected
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        xmlRpcSun15HttpTransport0.readResponse(xmlRpcHttpRequestConfigImpl0, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory(xmlRpcClient0);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[6];
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "7M[i0LEGorwa'P", objectArray0);
      try { 
        xmlRpcCommonsTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory(xmlRpcClient0);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      // Undeclared exception!
      try { 
        xmlRpcCommonsTransport0.newReqWriter((XmlRpcRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport((XmlRpcClient) null);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcLiteHttpTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport$ReqWriterImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory(xmlRpcClient0);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = (XmlRpcCommonsTransport)xmlRpcCommonsTransportFactory0.getTransport();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      Object[] objectArray0 = new Object[0];
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "Apache XML RPC 3.0", objectArray0);
      // Undeclared exception!
      try { 
        xmlRpcCommonsTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl cannot be cast to org.apache.xmlrpc.client.XmlRpcHttpClientConfig
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory((XmlRpcClient) null);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      // Undeclared exception!
      try { 
        xmlRpcCommonsTransport0.isCompressingRequest((XmlRpcStreamRequestConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "6l", linkedList0);
      try { 
        xmlRpcLocalStreamTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to generate request: Unsupported Java type: java.lang.Object
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      xmlRpcHttpRequestConfigImpl0.setGzipRequesting(true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "\fm$Ng#9'.vv*vyQ", linkedList0);
      try { 
        xmlRpcLocalStreamTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read server's response: null
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "`bgd@zPR", linkedList0);
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      XmlRpcStreamTransport.ReqWriterImpl xmlRpcStreamTransport_ReqWriterImpl0 = xmlRpcSun15HttpTransport0.new ReqWriterImpl(xmlRpcClientRequestImpl0);
      // Undeclared exception!
      try { 
        xmlRpcStreamTransport_ReqWriterImpl0.write((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "6l", linkedList0);
      try { 
        xmlRpcLocalStreamTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse server's response: Premature end of file.
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[6];
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "|`|UNuc\"gW]t\"", objectArray0);
      try { 
        xmlRpcLocalStreamTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcStreamRequestProcessor xmlRpcStreamRequestProcessor0 = mock(XmlRpcStreamRequestProcessor.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamTransport xmlRpcLocalStreamTransport0 = new XmlRpcLocalStreamTransport(xmlRpcClient0, xmlRpcStreamRequestProcessor0);
      XmlRpcStreamTransport.GzipReqWriter xmlRpcStreamTransport_GzipReqWriter0 = xmlRpcLocalStreamTransport0.new GzipReqWriter((XmlRpcStreamTransport.ReqWriter) null);
      // Undeclared exception!
      try { 
        xmlRpcStreamTransport_GzipReqWriter0.write((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }
}
