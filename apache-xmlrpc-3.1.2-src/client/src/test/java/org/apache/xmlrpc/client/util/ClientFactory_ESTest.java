/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:45:54 GMT 2021
 */

package org.apache.xmlrpc.client.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.util.ClientFactory;
import org.apache.xmlrpc.common.TypeConverterFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientFactory_ESTest extends ClientFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClientFactory clientFactory0 = new ClientFactory((XmlRpcClient) null);
      assertFalse(clientFactory0.isObjectMethodLocal());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      ClientFactory clientFactory0 = new ClientFactory(xmlRpcClient0);
      clientFactory0.setObjectMethodLocal(true);
      boolean boolean0 = clientFactory0.isObjectMethodLocal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeConverterFactory typeConverterFactory0 = mock(TypeConverterFactory.class, new ViolatedAssumptionAnswer());
      ClientFactory clientFactory0 = new ClientFactory((XmlRpcClient) null, typeConverterFactory0);
      XmlRpcClient xmlRpcClient0 = clientFactory0.getClient();
      assertNull(xmlRpcClient0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      TypeConverterFactory typeConverterFactory0 = mock(TypeConverterFactory.class, new ViolatedAssumptionAnswer());
      ClientFactory clientFactory0 = new ClientFactory(xmlRpcClient0, typeConverterFactory0);
      // Undeclared exception!
      try { 
        clientFactory0.newInstance((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.util.ClientFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      TypeConverterFactory typeConverterFactory0 = mock(TypeConverterFactory.class, new ViolatedAssumptionAnswer());
      ClientFactory clientFactory0 = new ClientFactory(xmlRpcClient0, typeConverterFactory0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        clientFactory0.newInstance((ClassLoader) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Integer is not an interface
         //
         verifyException("java.lang.reflect.Proxy$ProxyClassFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      ClientFactory clientFactory0 = new ClientFactory(xmlRpcClient0);
      boolean boolean0 = clientFactory0.isObjectMethodLocal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      TypeConverterFactory typeConverterFactory0 = mock(TypeConverterFactory.class, new ViolatedAssumptionAnswer());
      ClientFactory clientFactory0 = new ClientFactory(xmlRpcClient0, typeConverterFactory0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        clientFactory0.newInstance(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String is not an interface
         //
         verifyException("java.lang.reflect.Proxy$ProxyClassFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = mock(XmlRpcClient.class, new ViolatedAssumptionAnswer());
      ClientFactory clientFactory0 = new ClientFactory(xmlRpcClient0);
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(classLoader0).loadClass(anyString());
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        clientFactory0.newInstance(classLoader0, class0, "IkthAX+JkZ!QR/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String is not visible from class loader
         //
         verifyException("java.lang.reflect.Proxy$ProxyClassFactory", e);
      }
  }
}
