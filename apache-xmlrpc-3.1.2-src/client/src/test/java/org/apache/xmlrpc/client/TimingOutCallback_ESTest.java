/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:44:36 GMT 2021
 */

package org.apache.xmlrpc.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.client.TimingOutCallback;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.XmlRpcClientRequestImpl;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimingOutCallback_ESTest extends TimingOutCallback_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback((-1L));
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      String string0 = "|K\\";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) xmlRpcHttpRequestConfigImpl0;
      objectArray0[1] = (Object) "|K";
      objectArray0[2] = (Object) "|K";
      objectArray0[3] = (Object) "|K";
      objectArray0[4] = (Object) timingOutCallback0;
      try { 
        timingOutCallback0.waitForResponse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback(1L);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      String string0 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "", list0);
      locale0.getDisplayScript();
      TimingOutCallback.TimeoutException timingOutCallback_TimeoutException0 = new TimingOutCallback.TimeoutException(1426, "org.apache.xmlrpc.XmlRpcConfigImpl");
      timingOutCallback0.handleError(xmlRpcClientRequestImpl0, timingOutCallback_TimeoutException0);
      try { 
        timingOutCallback0.waitForResponse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback((-2377L));
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl1 = xmlRpcClientConfigImpl0.cloneMe();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl1, "A#<GSxseV<1UZ-LI", linkedList0);
      TimingOutCallback.TimeoutException timingOutCallback_TimeoutException0 = new TimingOutCallback.TimeoutException(0, "A#<GSxseV<1UZ-LI");
      MockThrowable mockThrowable0 = new MockThrowable(timingOutCallback_TimeoutException0);
      timingOutCallback0.handleError(xmlRpcClientRequestImpl0, mockThrowable0);
      try { 
        timingOutCallback0.waitForResponse();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback(1L);
      try { 
        timingOutCallback0.waitForResponse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No response after waiting for 1 milliseconds.
         //
         verifyException("org.apache.xmlrpc.client.TimingOutCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimingOutCallback.TimeoutException timingOutCallback_TimeoutException0 = new TimingOutCallback.TimeoutException((-2132), "Mc=3n !.");
      TimingOutCallback timingOutCallback0 = new TimingOutCallback(0L);
      XmlRpcRequest xmlRpcRequest0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Mc=3n !.");
      timingOutCallback_TimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Integer integer0 = new Integer(0);
      timingOutCallback0.handleResult((XmlRpcRequest) null, integer0);
      timingOutCallback0.waitForResponse();
      timingOutCallback0.handleError((XmlRpcRequest) null, timingOutCallback_TimeoutException0);
      timingOutCallback0.handleError((XmlRpcRequest) null, timingOutCallback_TimeoutException0);
      timingOutCallback0.handleError((XmlRpcRequest) null, timingOutCallback_TimeoutException0);
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback(1112L);
      assertNotNull(timingOutCallback0);
      
      try { 
        timingOutCallback0.waitForResponse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No response after waiting for 1112 milliseconds.
         //
         verifyException("org.apache.xmlrpc.client.TimingOutCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback(62L);
      assertNotNull(timingOutCallback0);
      
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      assertNotNull(xmlRpcHttpRequestConfigImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      
      String string0 = "org.apache.xmlrpc.client.XmlRpcClientConfigImpl";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(62L));
      
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "org.apache.xmlrpc.client.XmlRpcClientConfigImpl", linkedList0);
      assertNotNull(xmlRpcClientRequestImpl0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains("org.apache.xmlrpc.client.XmlRpcClientConfigImpl"));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      xmlRpcHttpRequestConfigImpl0.setGzipRequesting(false);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      
      timingOutCallback0.handleResult(xmlRpcClientRequestImpl0, integer0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains("org.apache.xmlrpc.client.XmlRpcClientConfigImpl"));
      
      Object object0 = timingOutCallback0.waitForResponse();
      assertEquals(0, object0);
      assertNotNull(object0);
      
      timingOutCallback0.handleResult(xmlRpcClientRequestImpl0, (Object) null);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains("org.apache.xmlrpc.client.XmlRpcClientConfigImpl"));
      
      timingOutCallback0.handleResult(xmlRpcClientRequestImpl0, "org.apache.xmlrpc.client.XmlRpcClientConfigImpl");
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains("org.apache.xmlrpc.client.XmlRpcClientConfigImpl"));
      
      Object object1 = timingOutCallback0.waitForResponse();
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", object1);
      assertNotNull(object1);
      assertTrue(object1.equals((Object)string0));
      
      Object object2 = timingOutCallback0.waitForResponse();
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", object2);
      assertNotNull(object2);
      assertTrue(object2.equals((Object)string0));
      
      timingOutCallback0.handleResult(xmlRpcClientRequestImpl0, (Object) null);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains("org.apache.xmlrpc.client.XmlRpcClientConfigImpl"));
      
      TimingOutCallback.TimeoutException timingOutCallback_TimeoutException0 = new TimingOutCallback.TimeoutException(1, "pWi'867d0!#");
      assertNotNull(timingOutCallback_TimeoutException0);
      assertEquals(1, timingOutCallback_TimeoutException0.code);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("pWi'867d0!#", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      timingOutCallback_TimeoutException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals(1, timingOutCallback_TimeoutException0.code);
      
      Throwable throwable0 = timingOutCallback_TimeoutException0.getCause();
      assertNull(throwable0);
      assertEquals(1, timingOutCallback_TimeoutException0.code);
      
      timingOutCallback0.handleError(xmlRpcClientRequestImpl0, (Throwable) null);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains(false));
      
      Object object3 = timingOutCallback0.waitForResponse();
      assertNull(object3);
      
      timingOutCallback0.handleError(xmlRpcClientRequestImpl0, timingOutCallback_TimeoutException0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains(false));
      assertEquals(1, timingOutCallback_TimeoutException0.code);
      
      Throwable throwable1 = timingOutCallback_TimeoutException0.linkedException;
      assertNull(throwable1);
      
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      timingOutCallback0.handleError(xmlRpcClientRequestImpl0, mockThrowable0);
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertFalse(linkedList0.contains(false));
      
      timingOutCallback0.handleResult(xmlRpcClientRequestImpl0, "pWi'867d0!#");
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains(false));
      
      timingOutCallback0.handleResult(xmlRpcClientRequestImpl0, "org.apache.xmlrpc.client.XmlRpcClientConfigImpl");
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipCompressing());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isContentLengthOptional());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExtensions());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isEnabledForExceptions());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicUserName());
      assertNull(xmlRpcHttpRequestConfigImpl0.getEncoding());
      assertNull(xmlRpcHttpRequestConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcHttpRequestConfigImpl0.getReplyTimeout());
      assertFalse(xmlRpcHttpRequestConfigImpl0.isGzipRequesting());
      assertEquals(0, linkedList0.size());
      assertEquals("org.apache.xmlrpc.client.XmlRpcClientConfigImpl", xmlRpcClientRequestImpl0.getMethodName());
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
      assertFalse(linkedList0.contains(false));
      
      try { 
        timingOutCallback0.waitForResponse();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback((-3341L));
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      String string0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) timingOutCallback0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) timingOutCallback0;
      try { 
        timingOutCallback0.waitForResponse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimingOutCallback timingOutCallback0 = new TimingOutCallback(0L);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl1 = xmlRpcClientConfigImpl0.cloneMe();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl1, "", objectArray0);
      timingOutCallback0.handleResult(xmlRpcClientRequestImpl0, xmlRpcClientRequestImpl0);
      assertEquals(1, xmlRpcClientRequestImpl0.getParameterCount());
  }
}
