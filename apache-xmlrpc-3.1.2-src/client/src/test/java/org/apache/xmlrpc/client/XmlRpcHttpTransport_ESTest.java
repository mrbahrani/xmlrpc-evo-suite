/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 06:42:55 GMT 2021
 */

package org.apache.xmlrpc.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.Set;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfig;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.XmlRpcClientRequestImpl;
import org.apache.xmlrpc.client.XmlRpcCommonsTransport;
import org.apache.xmlrpc.client.XmlRpcCommonsTransportFactory;
import org.apache.xmlrpc.client.XmlRpcHttpClientConfig;
import org.apache.xmlrpc.client.XmlRpcHttpTransport;
import org.apache.xmlrpc.client.XmlRpcLite14HttpTransport;
import org.apache.xmlrpc.client.XmlRpcLiteHttpTransport;
import org.apache.xmlrpc.client.XmlRpcStreamTransport;
import org.apache.xmlrpc.client.XmlRpcSun14HttpTransport;
import org.apache.xmlrpc.client.XmlRpcSun15HttpTransport;
import org.apache.xmlrpc.client.XmlRpcSunHttpTransport;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.SAXException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcHttpTransport_ESTest extends XmlRpcHttpTransport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      xmlRpcSun15HttpTransport0.setCredentials(xmlRpcClientConfigImpl0);
      assertNull(xmlRpcClientConfigImpl0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      xmlRpcLiteHttpTransport0.setContentLength((-3381));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      xmlRpcSun15HttpTransport0.setCompressionHeaders(xmlRpcClientConfigImpl0);
      assertEquals(0, xmlRpcClientConfigImpl0.getConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "Apache XML RPC 3.0", linkedList0);
      xmlRpcLiteHttpTransport0.initHttpHeaders(xmlRpcClientRequestImpl0);
      assertEquals(0, xmlRpcClientRequestImpl0.getParameterCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSunHttpTransport xmlRpcSunHttpTransport0 = new XmlRpcSunHttpTransport(xmlRpcClient0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      LinkedList<XmlRpcClientConfigImpl> linkedList0 = new LinkedList<XmlRpcClientConfigImpl>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "The ParsePosition argument must not be null.", linkedList0);
      XmlRpcHttpTransport.ByteArrayReqWriter xmlRpcHttpTransport_ByteArrayReqWriter0 = xmlRpcSunHttpTransport0.new ByteArrayReqWriter(xmlRpcClientRequestImpl0);
      int int0 = xmlRpcHttpTransport_ByteArrayReqWriter0.getContentLength();
      assertEquals(141, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      boolean boolean0 = xmlRpcSun15HttpTransport0.isUsingByteArrayOutput(xmlRpcClientConfigImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      String string0 = xmlRpcLiteHttpTransport0.getUserAgent();
      assertEquals("Apache XML RPC 3.0 (Lite HTTP Transport)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      xmlRpcClientConfigImpl0.setBasicEncoding("Apache XML RPC 3.0");
      xmlRpcClientConfigImpl0.setBasicUserName("org.apache.xmlrpc.client.XmlRpcHttpTransport");
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      try { 
        xmlRpcSun15HttpTransport0.setCredentials(xmlRpcClientConfigImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: Apache XML RPC 3.0
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun14HttpTransport xmlRpcSun14HttpTransport0 = new XmlRpcSun14HttpTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcSun14HttpTransport0.setCredentials((XmlRpcHttpClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSunHttpTransport xmlRpcSunHttpTransport0 = new XmlRpcSunHttpTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcSunHttpTransport0.setContentLength(2008);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcSunHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      xmlRpcClientConfigImpl0.setGzipRequesting(true);
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcSun15HttpTransport0.setCompressionHeaders(xmlRpcClientConfigImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcSunHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLite14HttpTransport xmlRpcLite14HttpTransport0 = new XmlRpcLite14HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      xmlRpcClientConfigImpl0.setServerURL(uRL0);
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      linkedList0.add((PushbackInputStream) null);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      try { 
        xmlRpcLite14HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcLite14HttpTransport xmlRpcLite14HttpTransport0 = new XmlRpcLite14HttpTransport((XmlRpcClient) null);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      xmlRpcClientConfigImpl0.setServerURL(uRL0);
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcLite14HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport$ReqWriterImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory(xmlRpcClient0);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "o@Z^4R", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcCommonsTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl cannot be cast to org.apache.xmlrpc.client.XmlRpcHttpClientConfig
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcCommonsTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[6];
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "1ll`-e`sS=VC", objectArray0);
      try { 
        xmlRpcSun15HttpTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.common.TypeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun14HttpTransport xmlRpcSun14HttpTransport0 = new XmlRpcSun14HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[1];
      xmlRpcClientConfigImpl0.setEncoding("19cN]hb");
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", objectArray0);
      try { 
        xmlRpcSun14HttpTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: 19cN]hb
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcSun15HttpTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcSunHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory((XmlRpcClient) null);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[6];
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", objectArray0);
      // Undeclared exception!
      try { 
        xmlRpcCommonsTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport$ReqWriterImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory((XmlRpcClient) null);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      LinkedList<XmlRpcClientConfigImpl> linkedList0 = new LinkedList<XmlRpcClientConfigImpl>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcCommonsTransport0.newReqWriter(xmlRpcClientRequestImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl cannot be cast to org.apache.xmlrpc.client.XmlRpcHttpClientConfig
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLite14HttpTransport xmlRpcLite14HttpTransport0 = new XmlRpcLite14HttpTransport(xmlRpcClient0);
      // Undeclared exception!
      try { 
        xmlRpcLite14HttpTransport0.isUsingByteArrayOutput((XmlRpcHttpClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSunHttpTransport xmlRpcSunHttpTransport0 = new XmlRpcSunHttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      Object[] objectArray0 = new Object[4];
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", objectArray0);
      // Undeclared exception!
      try { 
        xmlRpcSunHttpTransport0.initHttpHeaders(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcSunHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcSun14HttpTransport xmlRpcSun14HttpTransport0 = new XmlRpcSun14HttpTransport(xmlRpcClient0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcHttpRequestConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcSun14HttpTransport0.initHttpHeaders(xmlRpcClientRequestImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl cannot be cast to org.apache.xmlrpc.client.XmlRpcHttpClientConfig
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcCommonsTransportFactory xmlRpcCommonsTransportFactory0 = new XmlRpcCommonsTransportFactory(xmlRpcClient0);
      XmlRpcCommonsTransport xmlRpcCommonsTransport0 = new XmlRpcCommonsTransport(xmlRpcCommonsTransportFactory0);
      XmlRpcClientConfig xmlRpcClientConfig0 = xmlRpcClient0.getClientConfig();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfig0, "o@Z^4R", linkedList0);
      // Undeclared exception!
      try { 
        xmlRpcCommonsTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      URI uRI0 = MockURI.aHttpURI;
      xmlRpcClientConfigImpl0.setEnabledForExtensions(true);
      URL uRL0 = MockURI.toURL(uRI0);
      xmlRpcClientConfigImpl0.setServerURL(uRL0);
      xmlRpcClientConfigImpl0.setGzipCompressing(true);
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      try { 
        xmlRpcSun15HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read server's response: protocol doesn't support output
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      xmlRpcClientConfigImpl0.setEnabledForExtensions(true);
      xmlRpcClientConfigImpl0.setContentLengthOptional(true);
      XmlRpcSun15HttpTransport xmlRpcSun15HttpTransport0 = new XmlRpcSun15HttpTransport(xmlRpcClient0);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "],.P)Zc6$ ", linkedList0);
      XmlRpcStreamTransport.ReqWriter xmlRpcStreamTransport_ReqWriter0 = xmlRpcSun15HttpTransport0.newReqWriter(xmlRpcClientRequestImpl0);
      assertNotNull(xmlRpcStreamTransport_ReqWriter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLite14HttpTransport xmlRpcLite14HttpTransport0 = new XmlRpcLite14HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      xmlRpcClientConfigImpl0.setServerURL(uRL0);
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      xmlRpcClientConfigImpl0.setUserAgent("Apache XML RPC 3.0");
      try { 
        xmlRpcLite14HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to open connection to foo.bar:80: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@28f6e83d
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLiteHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLite14HttpTransport xmlRpcLite14HttpTransport0 = new XmlRpcLite14HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      xmlRpcClientConfigImpl0.setServerURL(uRL0);
      xmlRpcClientConfigImpl0.setBasicUserName("Apache XML RPC 3.0");
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      try { 
        xmlRpcLite14HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to open connection to foo.bar:80: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@28f6e83d
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcLiteHttpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLite14HttpTransport xmlRpcLite14HttpTransport0 = new XmlRpcLite14HttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      xmlRpcClientConfigImpl0.setServerURL(uRL0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 80);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      try { 
        xmlRpcLite14HttpTransport0.sendRequest(xmlRpcClientRequestImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read server's response: Method not implemented!
         //
         verifyException("org.apache.xmlrpc.client.XmlRpcStreamTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      XmlRpcHttpTransport.ByteArrayReqWriter xmlRpcHttpTransport_ByteArrayReqWriter0 = xmlRpcLiteHttpTransport0.new ByteArrayReqWriter(xmlRpcClientRequestImpl0);
      // Undeclared exception!
      try { 
        xmlRpcHttpTransport_ByteArrayReqWriter0.write((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRpcClient xmlRpcClient0 = new XmlRpcClient();
      XmlRpcLiteHttpTransport xmlRpcLiteHttpTransport0 = new XmlRpcLiteHttpTransport(xmlRpcClient0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      XmlRpcClientRequestImpl xmlRpcClientRequestImpl0 = new XmlRpcClientRequestImpl(xmlRpcClientConfigImpl0, "Apache XML RPC 3.0", linkedList0);
      XmlRpcHttpTransport.ByteArrayReqWriter xmlRpcHttpTransport_ByteArrayReqWriter0 = xmlRpcLiteHttpTransport0.new ByteArrayReqWriter(xmlRpcClientRequestImpl0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8%6");
      xmlRpcHttpTransport_ByteArrayReqWriter0.write(mockFileOutputStream0);
  }
}
