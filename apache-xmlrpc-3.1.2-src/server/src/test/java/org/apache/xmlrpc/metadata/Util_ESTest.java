/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 07:48:35 GMT 2021
 */

package org.apache.xmlrpc.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.apache.xmlrpc.metadata.Util;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Util.getSignatureType(class0);
      Util.getSignatureType(class0);
      Method[] methodArray0 = new Method[0];
      Util.getMethodHelp(class0, methodArray0);
      Class<String> class1 = String.class;
      Util.getSignatureType(class1);
      Util.getMethodHelp(class1, methodArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[8] = (Object) class0;
      Util.getSignature(objectArray0);
      Class<Integer> class1 = Integer.class;
      Util.getSignatureType(class1);
      try { 
        Util.newInstance(class1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate class java.lang.Integer
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Util util0 = new Util();
      Method[] methodArray0 = new Method[0];
      Util.getSignature(methodArray0);
      Method[] methodArray1 = new Method[7];
      Util.getSignature((Object[]) methodArray1);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Util.getMethodHelp(class0, methodArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Method[] methodArray0 = new Method[3];
      // Undeclared exception!
      try { 
        Util.getSignature(methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Util util0 = new Util();
      Class<Object> class0 = Object.class;
      Util.getMethodHelp(class0, (Method) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Util.newInstance(class0);
      Method[] methodArray0 = new Method[9];
      methodArray0[6] = methodArray0[5];
      Util.getSignature(methodArray0);
      // Undeclared exception!
      try { 
        Util.getSignature((Object[]) methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Util util0 = new Util();
      Class<Integer> class0 = Integer.class;
      try { 
        Util.newInstance(class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate class java.lang.Integer
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      Util.getMethodHelp(class0, (Method[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method method0 = null;
      // Undeclared exception!
      try { 
        Util.getMethodHelp(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Class<Object> class0 = Object.class;
      Object object0 = Util.newInstance(class0);
      objectArray0[0] = object0;
      Object object1 = Util.newInstance(class0);
      objectArray0[1] = object1;
      Object object2 = Util.newInstance(class0);
      objectArray0[2] = object2;
      Object object3 = Util.newInstance(class0);
      objectArray0[3] = object3;
      Class<Integer> class1 = Integer.class;
      try { 
        Util.newInstance(class1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate class java.lang.Integer
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Util.newInstance(class0);
      Util.newInstance(class0);
      Method[] methodArray0 = null;
      // Undeclared exception!
      try { 
        Util.getMethodHelp(class0, (Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = new Method[0];
      Util.getMethodHelp(class0, methodArray0);
      Util.getSignature((Object[]) methodArray0);
      Util.getSignature(methodArray0);
      Util.getSignature((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Object> class0 = Object.class;
      Object object0 = Util.newInstance(class0);
      objectArray0[0] = object0;
      Util.getSignature(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Util util0 = new Util();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) util0;
      objectArray0[1] = (Object) util0;
      objectArray0[2] = (Object) util0;
      objectArray0[3] = (Object) util0;
      objectArray0[4] = (Object) util0;
      Util.getSignature(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = new Method[0];
      Util.getMethodHelp(class0, methodArray0);
      Class<String> class1 = String.class;
      Util.getMethodHelp(class1, methodArray0);
      Class<String> class2 = String.class;
      Util.getMethodHelp(class2, methodArray0);
      Util.getSignature(methodArray0);
      Util.getSignature(methodArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Util.getSignatureType(class0);
      Util.getSignatureType(class0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Util.getSignatureType(class0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Util.getSignatureType(class0);
      Util.getSignatureType(class0);
      Class<Object> class1 = Object.class;
      Util.getSignatureType(class1);
      Class<Object> class2 = Object.class;
      Util.newInstance(class2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) null;
      Util.getSignature(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Util util0 = new Util();
      Util.getSignature((Method) null);
      Class<String> class0 = String.class;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Util.getSignatureType(class0);
      Util.newInstance(class0);
      Util util0 = new Util();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) util0;
      Util.getSignature(objectArray0);
      Util.getSignature((Object[]) null);
      // Undeclared exception!
      try { 
        Util.newInstance(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Util.getSignatureType(class0);
      Util util0 = new Util();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      Class<String> class1 = String.class;
      Util.newInstance(class1);
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) util0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) util0;
      objectArray0[6] = (Object) util0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) util0;
      Util.getSignature(objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) class0;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) class0;
      objectArray1[5] = (Object) null;
      Util.getSignature(objectArray1);
      Class<String> class2 = String.class;
      Util.getSignatureType(class2);
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) null;
      Class<Object> class3 = Object.class;
      Object object0 = Util.newInstance(class3);
      objectArray2[1] = object0;
      Util.getSignature(objectArray2);
      Util.getSignature((Method[]) null);
      // Undeclared exception!
      try { 
        Util.getSignature(objectArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = new Method[3];
      // Undeclared exception!
      try { 
        Util.getMethodHelp(class0, methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Class<String> class0 = String.class;
      Util.newInstance(class0);
      objectArray0[0] = (Object) "";
      Object object0 = Util.newInstance((Class) null);
      objectArray0[1] = object0;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Util.newInstance(class0);
      Util.newInstance(class0);
      Class<Integer> class1 = Integer.class;
      Util.getSignatureType(class1);
      Class<Object> class2 = Object.class;
      Util.getSignatureType((Class) null);
      Object[] objectArray0 = new Object[9];
  }
}
