/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 07:49:26 GMT 2021
 */

package org.apache.xmlrpc.webserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.util.Locale;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import org.apache.xmlrpc.webserver.HttpServletResponseImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpServletResponseImpl_ESTest extends HttpServletResponseImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(socket1).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl1 = new HttpServletResponseImpl(socket1);
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl1.getOutputStream();
      Socket socket2 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream1).when(socket2).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl2 = new HttpServletResponseImpl(socket2);
      httpServletResponseImpl2.setContentType("charset=gb,{k");
      int int0 = 2459;
      httpServletResponseImpl2.sendError(408);
      httpServletResponseImpl2.setBufferSize(int0);
      int int1 = 1954;
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 0;
      httpServletResponseImpl0.setStatus(0, (String) null);
      int int1 = 0;
      Integer integer0 = new Integer(406);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      String string0 = "y7aIqF0`|c-W(?Vn";
      httpServletResponseImpl0.sendError(0, "y7aIqF0`|c-W(?Vn");
      httpServletResponseImpl0.setStatus(0, "GtH1?");
      httpServletResponseImpl0.containsHeader("y7aIqF0`|c-W(?Vn");
      httpServletResponseImpl0.sendError(406, "D,2dy \"qv`9rv");
      httpServletResponseImpl0.getOutputStream();
      String string1 = null;
      long long0 = 1382L;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addDateHeader(string1, long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      int int0 = 3732;
      httpServletResponseImpl0.setStatus(3732);
      httpServletResponseImpl0.flushBuffer();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.sendError(0, "");
      Integer integer0 = new Integer(0);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.encodeRedirectURL("G~@");
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.flushBuffer();
      String string0 = "!jv";
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.containsHeader("US-ASCII");
      Integer integer0 = new Integer((-125));
      httpServletResponseImpl0.getWriter();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(socket1).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl1 = new HttpServletResponseImpl(socket1);
      httpServletResponseImpl1.getOutputStream();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      Cookie cookie1 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      HttpServletResponseImpl.getStatusMessage(13);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      Integer integer0 = new Integer(8192);
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      int int0 = 0;
      httpServletResponseImpl0.setContentLength(0);
      httpServletResponseImpl0.containsHeader("HTTP/1.0 200 OK\r\nContent-Length: 8192\r\n\r\n");
      httpServletResponseImpl0.setContentLength(302);
      httpServletResponseImpl0.isCommitted();
      httpServletResponseImpl0.getWriter();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.addDateHeader("HTTP/1.0 200 OK\r\nContent-Length: 8192\r\n\r\n", 1L);
      httpServletResponseImpl0.flushBuffer();
      httpServletResponseImpl0.getLocale();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.addIntHeader("&qQgJ-m=VcsEWJ", (-4138));
      httpServletResponseImpl0.getBufferSize();
      String string0 = "Proxy Authentication Required";
      httpServletResponseImpl0.sendError(201);
      String string1 = "http res";
      httpServletResponseImpl0.addHeader(string0, string1);
      httpServletResponseImpl0.getCharacterEncoding();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError((-441));
      httpServletResponseImpl0.sendRedirect("sW)[3y7)o%]E+'QL}");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      Integer integer0 = new Integer((-285186159));
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.containsHeader("rjs6ddh");
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setContentLength(3346);
      String string0 = "charset=text/htm";
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getOutputStream();
      String string1 = HttpServletResponseImpl.getStatusMessage(304);
      long long0 = (-1L);
      httpServletResponseImpl0.setDateHeader("b{Ut7fFj@(c;|", (-1L));
      httpServletResponseImpl0.encodeRedirectUrl(string0);
      httpServletResponseImpl0.getContentType();
      String string2 = null;
      httpServletResponseImpl0.encodeUrl(string2);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect(string1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 409;
      httpServletResponseImpl0.setStatus(409);
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.setContentType((String) null);
      httpServletResponseImpl0.addDateHeader((String) null, 4858L);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getWriter();
      httpServletResponseImpl0.sendError(423);
      int int0 = (-63);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.sendRedirect("The response is already committed. A reset cannot be performed.");
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getCharacterEncoding();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.encodeRedirectURL("\fZ,%7WXS].T");
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getContentType();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "PF>V$BME8|4tk9Sr";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL("PF>V$BME8|4tk9Sr");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.addIntHeader("MA.d**", (-1550));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError((-441));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setBufferSize(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.encodeRedirectUrl("ztS;G>");
      int int0 = (-3742);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getWriter();
      int int0 = (-364);
      HttpServletResponseImpl.getStatusMessage((-364));
      httpServletResponseImpl0.setContentType("HTTP Response Status -364");
      int int1 = (-1858);
      httpServletResponseImpl0.addIntHeader((String) null, (-1858));
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 1144;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(1144);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.resetBuffer();
      String string0 = "\";`z;P\\tt\"";
      httpServletResponseImpl0.addDateHeader("", 594L);
      httpServletResponseImpl0.sendRedirect(string0);
      long long0 = 0L;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.encodeRedirectUrl("s,p?g&c?Y1k");
      int int0 = 140;
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(socket1).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl1 = new HttpServletResponseImpl(socket1);
      httpServletResponseImpl1.resetBuffer();
      httpServletResponseImpl1.addIntHeader("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", 2312);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.addDateHeader((String) null, 0L);
      int int0 = 3705;
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = (-3107);
      httpServletResponseImpl0.setContentLength((-3107));
      httpServletResponseImpl0.getOutputStream();
      Locale locale0 = null;
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.getOutputStream();
      String string0 = "";
      httpServletResponseImpl0.addHeader("", "");
      int int1 = (-1);
      httpServletResponseImpl0.encodeRedirectUrl("");
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(int1, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.encodeURL("US-ASCII");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getBufferSize();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 2372;
      Integer integer0 = new Integer(2372);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      String string0 = "6@&)B~ *DyU?-r$VjaB";
      httpServletResponseImpl0.setIntHeader("6@&)B~ *DyU?-r$VjaB", 8192);
      httpServletResponseImpl0.setIntHeader("HTTP/1.0 200 OK\r\nContent-Length: 2372\r\n\r\n", 8192);
      httpServletResponseImpl0.getBufferSize();
      httpServletResponseImpl0.encodeURL("HTTP/1.0 200 OK\r\nContent-Length: 2372\r\n\r\n");
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getCharacterEncoding();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setCharacterEncoding("");
      httpServletResponseImpl0.setIntHeader("", (-1412));
      int int0 = 410;
      httpServletResponseImpl0.sendError(410);
      httpServletResponseImpl0.flushBuffer();
      int int1 = 556;
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.setCharacterEncoding((String) null);
      httpServletResponseImpl0.setHeader((String) null, "TqKG.Y[ZA|DVYU :Cl");
      httpServletResponseImpl0.reset();
      int int0 = (-1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 0;
      httpServletResponseImpl0.setStatus(0, (String) null);
      int int1 = 0;
      int int2 = 406;
      Integer integer0 = new Integer(406);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      String string0 = "y7aIqF0`|c-W(?Vn";
      httpServletResponseImpl0.sendError(0, "y7aIqF0`|c-W(?Vn");
      String string1 = "GtH1?";
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
      String string0 = "org.apache.xmlrpc.webserver.ServletOutputStreamImpl";
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "mL&+bLA0B9l~Pg#<(";
      int int0 = 2018;
      httpServletResponseImpl0.setStatus(2018, "7>62MCz(^-J)X");
      httpServletResponseImpl0.sendError(2018);
      long long0 = (-1288L);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setStatus(500);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setDateHeader("", 0L);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.resetBuffer();
      String string0 = "";
      httpServletResponseImpl0.setDateHeader("", (-566L));
      long long0 = (-2293L);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setContentLength(202);
      Integer integer0 = new Integer(202);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setStatus(202, "");
      httpServletResponseImpl0.addHeader("", "HTTP/1.0 200 OK\r\ncontent-length: 202\r\n\r\n");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "2Dt|nPq9k";
      httpServletResponseImpl0.setHeader("2Dt|nPq9k", "2Dt|nPq9k");
      String string1 = "Hvws?";
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.addCookie(cookie0);
      int int0 = 8192;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError(2355, "4!M(", "4!M(");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError(422);
      String string0 = "The response is already committed. A reset cannot be performed.";
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getOutputStream();
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      httpServletResponseImpl0.setStatus(305);
      String string0 = "";
      httpServletResponseImpl0.addHeader("|0}C2@){VO,", "");
      httpServletResponseImpl0.sendError(305);
      String string1 = "U@A<4\"9";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError(0, "", "");
      httpServletResponseImpl0.getBufferSize();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setStatus((-1));
      String string0 = null;
      httpServletResponseImpl0.sendError((-1), (String) null, (String) null);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getCharacterEncoding();
      long long0 = (-1226L);
      int int0 = 417;
      httpServletResponseImpl0.setStatus(417);
      httpServletResponseImpl0.setDateHeader("]7P>)h(", (-1226L));
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "i]M";
      String string1 = ">+E=C\"";
      httpServletResponseImpl0.addHeader("YYHI!k/D!U}~", ">+E=C\"");
      HttpServletResponseImpl.getStatusMessage(207);
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.setBufferSize(509);
      int int0 = 2880;
      String string2 = "";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect(string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.addHeader((String) null, "Yb,xBn'+&BgC(G`wN/");
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = null;
      int int0 = (-1981);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setIntHeader((String) null, (-1981));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setStatus(3445);
      String string0 = "yPc|v.3U$wG";
      int int0 = 100;
      HttpServletResponseImpl.getStatusMessage(100);
      httpServletResponseImpl0.setBufferSize(3445);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setContentType(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setContentLength(535);
      String string0 = "LY`";
      httpServletResponseImpl0.containsHeader("LY`");
      httpServletResponseImpl0.setStatus(0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.sendError(535, "UZjNKLW[_)", "UW4~7F`Qfa/Mz");
      httpServletResponseImpl0.encodeRedirectUrl(string0);
      String string1 = "Insufficient Storage";
      httpServletResponseImpl0.encodeRedirectURL(string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 2459;
      httpServletResponseImpl0.sendError(408);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.getWriter();
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.encodeRedirectURL("The response is already committed. A reset cannot be performed.");
      String string0 = "ruO|u#z";
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setCharacterEncoding("I Tb8Xo_n_W.");
      httpServletResponseImpl0.setCharacterEncoding("");
      httpServletResponseImpl0.getWriter();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = (-1016);
      String string0 = "tPc<:A4<0R0msy2%";
      httpServletResponseImpl0.setCharacterEncoding("J&]kyk");
      httpServletResponseImpl0.sendError((-1395), "tPc<:A4<0R0msy2%", "tPc<:A4<0R0msy2%");
      Locale locale0 = httpServletResponseImpl0.getLocale();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setLocale(locale0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setContentType("The response is already committed. A reset cannot be performed.");
      Integer integer0 = new Integer(1013);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.setContentType("");
      httpServletResponseImpl0.getCharacterEncoding();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "Switching Protocols";
      httpServletResponseImpl0.getWriter();
      Integer integer0 = new Integer(0);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.setCharacterEncoding("Switching Protocols");
      httpServletResponseImpl0.sendError(0);
      String string1 = "Q[M8.*#g2_QS`uqg]:";
      long long0 = 0L;
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "This output stream is already closed.";
      httpServletResponseImpl0.setCharacterEncoding("This output stream is already closed.");
      int int0 = 0;
      httpServletResponseImpl0.setHeader("This output stream is already closed.", "This output stream is already closed.");
      httpServletResponseImpl0.addHeader("This output stream is already closed.", (String) null);
      httpServletResponseImpl0.addIntHeader("This output stream is already closed.", 0);
      httpServletResponseImpl0.flushBuffer();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 204;
      HttpServletResponseImpl.getStatusMessage(204);
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.encodeURL("oO5\")FX6");
      int int1 = 757;
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getWriter();
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.getWriter();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.containsHeader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "";
      int int0 = 2076;
      httpServletResponseImpl0.setIntHeader("", 2076);
      int int1 = 0;
      httpServletResponseImpl0.setStatus(0);
      httpServletResponseImpl0.getWriter();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getOutputStream();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      String string0 = "KJe%^m4?zgo'b `Xk";
      String string1 = "";
      httpServletResponseImpl0.containsHeader("HTTP/1.0 ");
      httpServletResponseImpl0.setStatus(1597);
      httpServletResponseImpl0.setContentLength(1597);
      String string2 = null;
      HttpServletResponseImpl.getStatusMessage(305);
      httpServletResponseImpl0.sendError(1597, (String) null);
      httpServletResponseImpl0.addHeader(string0, string1);
      String string3 = "eN";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setCharacterEncoding(string3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HttpServletResponseImpl.getStatusMessage((-986));
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.setIntHeader("<jxgnSN}I{~&", (-986));
      httpServletResponseImpl0.containsHeader("The response is already committed. A reset cannot be performed.");
      httpServletResponseImpl0.sendError((-986));
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.getLocale();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      int int0 = 3732;
      httpServletResponseImpl0.setStatus(3732);
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.sendError(0, "");
      String string0 = httpServletResponseImpl0.encodeRedirectURL("G~@");
      httpServletResponseImpl0.flushBuffer();
      String string1 = "!jv";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(int0, string1, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HttpServletResponseImpl.getStatusMessage((-986));
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.setIntHeader("<jxgnSN}I{~&", (-986));
      httpServletResponseImpl0.containsHeader("The response is already committed. A reset cannot be performed.");
      httpServletResponseImpl0.setIntHeader("The response is already committed. A reset cannot be performed.", (-986));
      httpServletResponseImpl0.sendError((-986));
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.getLocale();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      HttpServletResponseImpl.getStatusMessage(0);
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.getHttpHeaders((Integer) null);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = (-743);
      String string0 = "";
      httpServletResponseImpl0.sendError((-743), "|X~PFr", "");
      httpServletResponseImpl0.encodeURL("org.apache.xmlrpc.webserver.ServletOutputStreamImpl");
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getHttpHeaders(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(socket1).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl1 = new HttpServletResponseImpl(socket1);
      httpServletResponseImpl1.setContentLength(1);
      httpServletResponseImpl1.flushBuffer();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      int int0 = 3732;
      httpServletResponseImpl0.setStatus(3732);
      httpServletResponseImpl0.flushBuffer();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.sendError(0, "");
      Integer integer0 = new Integer(0);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      String string0 = httpServletResponseImpl0.encodeRedirectURL("G~@");
      httpServletResponseImpl0.flushBuffer();
      String string1 = "!jv";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(int0, string1, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.addIntHeader(")COYRo=CEq1y", (-2414));
      httpServletResponseImpl0.sendError((-2414));
      String string0 = "";
      httpServletResponseImpl0.sendError((-2414), "mQ>-wzTv\"~BO9q@");
      httpServletResponseImpl0.setContentType(string0);
      String string1 = ">Ys(d;dH!M=&lc71F";
      int int0 = 1;
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError((-2414));
      httpServletResponseImpl0.getContentType();
      String string0 = "";
      httpServletResponseImpl0.sendError((-2414), "mQ>-wzTv\"~BO9q@");
      httpServletResponseImpl0.setContentType(string0);
      String string1 = ">Ys(d;dH!M=&lc71F";
      int int0 = 1;
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = (-1048);
      httpServletResponseImpl0.setContentType((String) null);
      String string0 = "content-length";
      httpServletResponseImpl0.getOutputStream();
      String string1 = "KSQ";
      httpServletResponseImpl0.encodeURL("KSQ");
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.flushBuffer();
      int int0 = (-1432);
      String string0 = "9";
      httpServletResponseImpl0.sendError((-1432), "9");
      httpServletResponseImpl0.isCommitted();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 505;
      String string0 = HttpServletResponseImpl.getStatusMessage(505);
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setHeader("", "HTTP Version Not Supported");
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.setContentType("HTTP Version Not Supported");
      String string1 = "org.apache.xmlrpc.webserver.ServletOutputStreamImpl";
      httpServletResponseImpl0.encodeRedirectURL("%2pp0S");
      httpServletResponseImpl0.setDateHeader(string1, int0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(int0, string1, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HttpServletResponseImpl.getStatusMessage((-1386));
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setContentType(";=z9p%deEAtT/^s");
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.setStatus(409);
      httpServletResponseImpl0.getCharacterEncoding();
      httpServletResponseImpl0.isCommitted();
      httpServletResponseImpl0.getWriter();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setContentType("0Uxu,PlT'k.S(fz@A");
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      int int0 = 2408;
      httpServletResponseImpl0.getWriter();
      String string0 = "Kz`15%.~#nT;Vetemu";
      httpServletResponseImpl0.setContentType("Kz`15%.~#nT;Vetemu");
      httpServletResponseImpl0.sendRedirect((String) null);
      httpServletResponseImpl0.setBufferSize(int0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      HttpServletResponseImpl.getStatusMessage(406);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HttpServletResponseImpl.getStatusMessage(408);
      HttpServletResponseImpl.getStatusMessage(0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.setStatus(3732);
      httpServletResponseImpl0.flushBuffer();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.sendError(0, "");
      Integer integer0 = new Integer(0);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.flushBuffer();
      httpServletResponseImpl0.sendError(3732, "!jv", "HTTP/1.0 0 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Length: 0\r\n\r\n");
      httpServletResponseImpl0.getCharacterEncoding();
      httpServletResponseImpl0.resetBuffer();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      String string0 = "JlN[OZR%'A>-Q?";
      httpServletResponseImpl0.getWriter();
      httpServletResponseImpl0.isCommitted();
      String string1 = "u~u\\oT0";
      httpServletResponseImpl0.sendRedirect("u~uoT0");
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError((-441), "D", "D");
      httpServletResponseImpl0.sendError((-441));
      String string0 = "sW)[3y7)o%]E+'QL}";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError(501);
      httpServletResponseImpl0.sendRedirect("sW)[3y7)o%]E+'QL}");
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      int int0 = 3732;
      httpServletResponseImpl0.setStatus(3732);
      httpServletResponseImpl0.sendError((-285186159), (String) null);
      httpServletResponseImpl0.flushBuffer();
      httpServletResponseImpl0.reset();
      int int1 = 0;
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 409;
      HttpServletResponseImpl.getStatusMessage(409);
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("Conflict");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 504;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(504);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      HttpServletResponseImpl.getStatusMessage(0);
      httpServletResponseImpl0.sendError(202);
      httpServletResponseImpl0.resetBuffer();
      httpServletResponseImpl0.resetBuffer();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.setStatus(403);
      httpServletResponseImpl0.encodeRedirectURL((String) null);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      Integer integer0 = new Integer((-285186159));
      httpServletResponseImpl0.setHeader("<#NlP+^W/ I", (String) null);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.containsHeader("rjs6ddh");
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setContentLength(3346);
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getOutputStream();
      int int0 = 304;
      httpServletResponseImpl0.sendRedirect("charset=&c}j3[x?-#g\"t4");
      HttpServletResponseImpl.getStatusMessage(int0);
      String string0 = "This output stream is already closed.";
      httpServletResponseImpl0.encodeRedirectUrl(string0);
      httpServletResponseImpl0.getContentType();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getOutputStream();
      HttpServletResponseImpl.getStatusMessage(416);
      Integer integer0 = new Integer(416);
  }
}
