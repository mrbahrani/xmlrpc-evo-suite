/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 09:10:37 GMT 2021
 */

package org.apache.xmlrpc.webserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.Locale;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import org.apache.xmlrpc.webserver.HttpServletResponseImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpServletResponseImpl_ESTest extends HttpServletResponseImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("content-type");
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = httpServletResponseImpl0.getContentType();
      assertEquals("content-type", string0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.reset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      try { 
        httpServletResponseImpl0.flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed stream
         //
         verifyException("org.evosuite.runtime.mock.java.net.SocketOut", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.containsHeader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addIntHeader((String) null, 503);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(0);
      assertEquals("HTTP Response Status 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = httpServletResponseImpl0.getContentType();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.resetBuffer();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      boolean boolean1 = httpServletResponseImpl0.isCommitted();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      boolean boolean1 = httpServletResponseImpl0.isCommitted();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = httpServletResponseImpl0.getCharacterEncoding();
      assertEquals("ISO-8859-1", string0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.addHeader("K>a", "");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setHeader("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", "US-ASCII");
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setStatus(303);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setIntHeader("", (-7993));
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentLength(1);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Integer integer0 = new Integer(1803);
      assertEquals(1803, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\ncontent-length: 1\r\n\r\n", string0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 400);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      MockSocket mockSocket0 = new MockSocket("Bad Request", 400);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/200.42.42.0,port=400,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertEquals("HTTP/1.0 200 OK\r\n\r\n", string0);
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/200.42.42.0,port=400,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(507);
      assertEquals("Insufficient Storage", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(505);
      assertEquals("HTTP Version Not Supported", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(503);
      assertEquals("Service Unavailable", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(417);
      assertEquals("Expectation Failed", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(416);
      assertEquals("Requested Range Not Satisfiable", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(415);
      assertEquals("Unsupported Media Type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(414);
      assertEquals("Request URI Too Long", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(413);
      assertEquals("Request Entity Too Large", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(412);
      assertEquals("Precondition Failed", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(411);
      assertEquals("Length Required", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(404);
      assertEquals("Not Found", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(403);
      assertEquals("Forbidden", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(401);
      assertEquals("Unauthorized", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(400);
      assertEquals("Bad Request", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(304);
      assertEquals("Not Modified", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(302);
      assertEquals("Moved Temporarily", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(203);
      assertEquals("Non-Authoritative Information", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(201);
      assertEquals("Created", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(100);
      assertEquals("Continue", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      MockSocket mockSocket0 = new MockSocket("", 303, true);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType((String) null);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = httpServletResponseImpl0.getContentType();
      assertEquals("", string0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(503, "This output stream is already closed.");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.resetBuffer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(printWriter0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(205, "", "content-type");
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(503, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.sendError(303, "");
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(1391, "", "See Other");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      boolean boolean1 = httpServletResponseImpl0.containsHeader("A0& Q3X{ No");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentLength((-753));
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      httpServletResponseImpl0.setLocale(locale0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.reset();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.flushBuffer();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect("N\"=L&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectUrl("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(303);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setCharacterEncoding("content-length");
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("content-length", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      try { 
        httpServletResponseImpl0.sendError(303, "Oq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      Cookie cookie0 = new Cookie("vH+BiesW'M~R_", "");
      assertNotNull(cookie0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      httpServletResponseImpl0.addIntHeader("", 303);
      Integer integer0 = new Integer(3358);
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\n: 303\r\nContent-Length: 3358\r\n\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addDateHeader("@0;mx4*V0<]9#", (-2197L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      int int0 = httpServletResponseImpl0.getBufferSize();
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      httpServletResponseImpl0.sendError((-1));
      assertTrue(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setDateHeader("", (-86L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }
}
