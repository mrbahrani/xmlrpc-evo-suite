/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 08:20:11 GMT 2021
 */

package org.apache.xmlrpc.webserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Locale;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import org.apache.xmlrpc.webserver.HttpServletResponseImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpServletResponseImpl_ESTest extends HttpServletResponseImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(206);
      assertEquals("Partial Content", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      int int0 = 535;
      httpServletResponseImpl0.setContentLength(535);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = "LY`";
      boolean boolean0 = httpServletResponseImpl0.containsHeader("LY`");
      assertFalse(boolean0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setStatus(0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      String string1 = "UZjNKLW[_)";
      httpServletResponseImpl0.sendError(201, "/SJV", "UZjNKLW[_)");
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      String string2 = HttpServletResponseImpl.getStatusMessage(422);
      assertEquals("Unprocessable Entity", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(422);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = httpServletResponseImpl0.getContentType();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(string0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage(201);
      assertEquals("Created", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addDateHeader((String) null, 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 400;
      String string0 = HttpServletResponseImpl.getStatusMessage(400);
      assertEquals("Bad Request", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      Integer integer0 = new Integer((-285186159));
      assertEquals((-285186159), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\nContent-Length: -285186159\r\n\r\n", string0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(string0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage((-285186159));
      assertEquals("HTTP Response Status -285186159", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = httpServletResponseImpl0.containsHeader("HTTP/1.0 200 OK\r\nContent-Length: -285186159\r\n\r\n");
      assertFalse(boolean0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(locale0);
      
      httpServletResponseImpl0.setContentLength(3346);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("charset=text/htm", "US-ASCII");
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\ncontent-length: 3346\r\ncharset=text/htm: -285186159\r\ncharset=text/htm: US-ASCII\r\n\r\n", string2);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream1, servletOutputStream0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream1);
      
      ServletOutputStream servletOutputStream2 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream2, servletOutputStream1);
      assertSame(servletOutputStream2, servletOutputStream0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream2);
      
      String string3 = HttpServletResponseImpl.getStatusMessage(304);
      assertEquals("Not Modified", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = HttpServletResponseImpl.getStatusMessage(405);
      assertEquals("Method Not Allowed", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("@uDpA7eP.Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-61);
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-7), (byte)7, (byte) (-79), (byte)103, (byte) (-115), (byte) (-61)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setStatus(203);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.resetBuffer();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addIntHeader("&qQgJ-m=VcsEWJ", (-4138));
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      int int0 = httpServletResponseImpl0.getBufferSize();
      assertEquals(8192, int0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = "Proxy Authentication Required";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(206);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = "";
      int int0 = 2076;
      httpServletResponseImpl0.setIntHeader("", 2076);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      int int1 = 413;
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "2dt|npq9k");
      assertFalse(boolean0);
      
      httpServletResponseImpl0.setStatus(413);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(printWriter0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getOutputStream();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(202);
      assertEquals("Accepted", string0);
      assertNotNull(string0);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("G:A][:rL0\"M>b");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("G:A][:rL0\"M>b/200.42.42.0", inetAddress0.toString());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      int int0 = 1352;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 1352, inetAddress0, 202);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@406d9efc
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError((-441));
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setContentLength((-1));
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(500);
      assertEquals("Internal Server Error", string0);
      assertNotNull(string0);
      
      boolean boolean0 = httpServletResponseImpl0.containsHeader("US-ASCII");
      assertFalse(boolean0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(402);
      assertEquals("Payment Required", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentLength(202);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Integer integer0 = new Integer(202);
      assertEquals(202, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\ncontent-length: 202\r\n\r\n", string0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      httpServletResponseImpl0.setStatus(202, "");
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addHeader("", "HTTP/1.0 200 OK\r\ncontent-length: 202\r\n\r\n");
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.containsHeader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      Integer integer0 = new Integer((-285186159));
      assertEquals((-285186159), (int)integer0);
      assertNotNull(integer0);
      
      httpServletResponseImpl0.setHeader("<#NlP+^W/ I", (String) null);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\nContent-Length: -285186159\r\n\r\n", string0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(string0);
      
      boolean boolean0 = httpServletResponseImpl0.containsHeader("rjs6ddh");
      assertFalse(boolean0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNull(locale0);
      
      httpServletResponseImpl0.setContentLength(3346);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      String string1 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\ncontent-length: 3346\r\ncharset=text/htm: -285186159\r\n\r\n", string1);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream1, servletOutputStream0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream1);
      
      ServletOutputStream servletOutputStream2 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream2, servletOutputStream1);
      assertSame(servletOutputStream2, servletOutputStream0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream2);
      
      int int0 = 304;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect("charset=&c}j3[x?-#g\"t4");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setStatus(403);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(0);
      assertEquals("HTTP Response Status 0", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      int int0 = 504;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(504);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(408);
      assertEquals("Request Timeout", string0);
      assertNotNull(string0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage(0);
      assertEquals("HTTP Response Status 0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      int int0 = 3732;
      httpServletResponseImpl0.setStatus(3732);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.sendError((-285186159), (String) null);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.flushBuffer();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.reset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = httpServletResponseImpl0.getCharacterEncoding();
      assertEquals("ISO-8859-1", string0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(string0);
      
      long long0 = (-1226L);
      int int0 = 417;
      httpServletResponseImpl0.setStatus(417);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setDateHeader("]7P>)h(", (-1226L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      String string0 = HttpServletResponseImpl.getStatusMessage(406);
      assertEquals("Not Acceptable", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = "JlN[OZR%'A>-Q?";
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(printWriter0);
      
      boolean boolean0 = httpServletResponseImpl0.isCommitted();
      assertFalse(boolean0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string1 = "u~u\\oT0";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect("u~uoT0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = httpServletResponseImpl0.getContentType();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNull(string0);
      
      String string1 = httpServletResponseImpl0.getContentType();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNull(string1);
      
      httpServletResponseImpl0.reset();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setContentType((String) null);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addDateHeader((String) null, 4858L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(printWriter0);
      
      int int0 = (-364);
      String string0 = httpServletResponseImpl0.getContentType();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNull(string0);
      
      httpServletResponseImpl0.setContentType((String) null);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      int int1 = (-1861);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addIntHeader((String) null, (-1861));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("0Uxu,PlT'k.S(fz@A");
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      int int0 = 2408;
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(printWriter0);
      
      String string0 = "Kz`15%.~#nT;Vetemu";
      httpServletResponseImpl0.setContentType("Kz`15%.~#nT;Vetemu");
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError(501);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect("sW)[3y7)o%]E+'QL}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 505;
      String string0 = HttpServletResponseImpl.getStatusMessage(505);
      assertEquals("HTTP Version Not Supported", string0);
      assertNotNull(string0);
      
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setHeader("", "HTTP Version Not Supported");
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string1 = httpServletResponseImpl0.getContentType();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNull(string1);
      
      httpServletResponseImpl0.setContentType("HTTP Version Not Supported");
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string2 = "org.apache.xmlrpc.webserver.ServletOutputStreamImpl";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL("%2pp0S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.resetBuffer();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.reset();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.flushBuffer();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      int int0 = (-1432);
      String string0 = "9";
      httpServletResponseImpl0.sendError((-1432), "9");
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      boolean boolean0 = httpServletResponseImpl0.isCommitted();
      assertTrue(boolean0);
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setStatus(3732);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.flushBuffer();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.reset();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.sendError(0, "");
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 0 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Length: 0\r\n\r\n", string0);
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.flushBuffer();
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(3732, "!jv", "HTTP/1.0 0 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Length: 0\r\n\r\n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError((-2414));
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = httpServletResponseImpl0.getContentType();
      assertEquals("text/html; charset=ISO-8859-1", string0);
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError((-2414), "mQ>-wzTv\"~BO9q@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage((-986));
      assertEquals("HTTP Response Status -986", string0);
      assertNotNull(string0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string1 = httpServletResponseImpl0.getContentType();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(string1);
      
      httpServletResponseImpl0.setIntHeader("<jxgnSN}I{~&", (-986));
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      boolean boolean0 = httpServletResponseImpl0.containsHeader("The response is already committed. A reset cannot be performed.");
      assertFalse(boolean0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setIntHeader("The response is already committed. A reset cannot be performed.", (-986));
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.sendError((-986));
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.resetBuffer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setCharacterEncoding("I Tb8Xo_n_W.");
      assertEquals("I Tb8Xo_n_W.", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setCharacterEncoding("");
      assertEquals("", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError((-441), "D", "D");
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError((-441));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = "";
      int int0 = 2076;
      httpServletResponseImpl0.setIntHeader("", 2076);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      int int1 = 0;
      httpServletResponseImpl0.setStatus(0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(printWriter0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getOutputStream();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = "KJe%^m4?zgo'b `Xk";
      String string1 = "";
      boolean boolean0 = httpServletResponseImpl0.containsHeader("HTTP/1.0 ");
      assertFalse(boolean0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setStatus(1597);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setContentLength(1597);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string2 = null;
      String string3 = HttpServletResponseImpl.getStatusMessage(305);
      assertEquals("Use Proxy", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(1597, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      int int0 = (-1016);
      String string0 = "tPc<:A4<0R0msy2%";
      httpServletResponseImpl0.setCharacterEncoding("J&]kyk");
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("J&]kyk", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      try { 
        httpServletResponseImpl0.sendError((-1395), "tPc<:A4<0R0msy2%", "tPc<:A4<0R0msy2%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("The response is already committed. A reset cannot be performed.");
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Integer integer0 = new Integer(1013);
      assertEquals(1013, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\nContent-Type: The response is already committed. A reset cannot be performed.\r\nContent-Length: 1013\r\n\r\n", string0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string1 = httpServletResponseImpl0.getCharacterEncoding();
      assertEquals("ISO-8859-1", string1);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(printWriter0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      PrintWriter printWriter1 = httpServletResponseImpl0.getWriter();
      assertSame(printWriter1, printWriter0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(printWriter1);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      httpServletResponseImpl0.setStatus(305);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = "";
      httpServletResponseImpl0.addHeader("|0}C2@){VO,", "");
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 204;
      String string0 = HttpServletResponseImpl.getStatusMessage(204);
      assertEquals("No Content", string0);
      assertNotNull(string0);
      
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("oO5\")FX6");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = "This output stream is already closed.";
      httpServletResponseImpl0.setCharacterEncoding("This output stream is already closed.");
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("This output stream is already closed.", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      int int0 = 0;
      httpServletResponseImpl0.setHeader("This output stream is already closed.", "This output stream is already closed.");
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("This output stream is already closed.", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addHeader("This output stream is already closed.", (String) null);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("This output stream is already closed.", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addIntHeader("This output stream is already closed.", 0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("This output stream is already closed.", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.reset();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(printWriter0);
      
      httpServletResponseImpl0.resetBuffer();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL("The response is already committed. A reset cannot be performed.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.sendError((-508), "&-2$6e\"x0", "Rl=");
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      int int0 = (-441);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.reset();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setStatus(3445);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = "yPc|v.3U$wG";
      int int0 = 100;
      String string1 = HttpServletResponseImpl.getStatusMessage(100);
      assertEquals("Continue", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(3445);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = "i]M";
      String string1 = ">+E=C\"";
      httpServletResponseImpl0.addHeader("YYHI!k/D!U}~", ">+E=C\"");
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string2 = HttpServletResponseImpl.getStatusMessage(207);
      assertEquals("Multi-Status", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = httpServletResponseImpl0.getContentType();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(509);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentLength(535);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = "LY`";
      boolean boolean0 = httpServletResponseImpl0.containsHeader("LY`");
      assertFalse(boolean0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setStatus(0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(535, "UZjNKLW[_)", "UW4~7F`Qfa/Mz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = null;
      int int0 = (-1981);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setIntHeader((String) null, (-1981));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addHeader((String) null, "Yb,xBn'+&BgC(G`wN/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(2355, "4!M(", "4!M(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(422);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = "2Dt|nPq9k";
      httpServletResponseImpl0.setHeader("2Dt|nPq9k", "2Dt|nPq9k");
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string1 = "Hvws?";
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\n2dt|npq9k: 2Dt|nPq9k\r\nContent-Length: 0\r\n\r\n", string2);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setStatus((-1));
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError((-1), (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = httpServletResponseImpl0.getContentType();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(string0);
      
      httpServletResponseImpl0.setCharacterEncoding((String) null);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setHeader((String) null, "TqKG.Y[ZA|DVYU :Cl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      int int0 = (-3107);
      httpServletResponseImpl0.setContentLength((-3107));
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      Locale locale0 = null;
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream1, servletOutputStream0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream1);
      
      String string0 = "";
      httpServletResponseImpl0.addHeader("", "");
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectUrl("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectUrl("ztS;G>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL("\fZ,%7WXS].T");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      int int0 = 535;
      httpServletResponseImpl0.setContentLength(535);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = "LY`";
      boolean boolean0 = httpServletResponseImpl0.containsHeader("LY`");
      assertFalse(boolean0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setStatus(0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(locale0);
      
      String string1 = "UZjNKLW[_)";
      String string2 = HttpServletResponseImpl.getStatusMessage(300);
      assertEquals("Multiple Choices", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(422);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(410);
      assertEquals("Gone", string0);
      assertNotNull(string0);
      
      String string1 = "US-ASCII";
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Gone", 0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@406cfb44
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(416);
      assertEquals("Requested Range Not Satisfiable", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer(416);
      assertEquals(416, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 205;
      String string0 = HttpServletResponseImpl.getStatusMessage(205);
      assertEquals("Reset Content", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(200);
      assertEquals("OK", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("OK", 200);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@406d137c
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage((-986));
      assertEquals("HTTP Response Status -986", string0);
      assertNotNull(string0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      String string1 = httpServletResponseImpl0.getContentType();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(string1);
      
      httpServletResponseImpl0.setIntHeader("The response is already committed. A reset cannot be performed.", (-986));
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      boolean boolean0 = httpServletResponseImpl0.containsHeader("The response is already committed. A reset cannot be performed.");
      assertTrue(boolean0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.sendError((-986));
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(locale0);
      
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      httpServletResponseImpl0.setLocale(locale0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = new Integer((-285186159));
      assertEquals((-285186159), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\nContent-Length: -285186159\r\n\r\n", string0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(string0);
      
      String string1 = "rjs6ddh\\";
      boolean boolean0 = httpServletResponseImpl0.containsHeader("rjs6ddh");
      assertFalse(boolean0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      Locale locale1 = httpServletResponseImpl0.getLocale();
      assertSame(locale1, locale0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      httpServletResponseImpl0.setContentLength(3346);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\ncontent-length: 3346\r\ncharset=text/htm: -285186159\r\n\r\n", string2);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream1, servletOutputStream0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream1);
      
      ServletOutputStream servletOutputStream2 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream2, servletOutputStream0);
      assertSame(servletOutputStream2, servletOutputStream1);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream2);
      
      String string3 = HttpServletResponseImpl.getStatusMessage(304);
      assertEquals("Not Modified", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("@uDpA7eP.Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setStatus(203);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.resetBuffer();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addIntHeader("&qQgJ-m=VcsEWJ", (-4138));
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      int int0 = httpServletResponseImpl0.getBufferSize();
      assertEquals(8192, int0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = "Proxy Authentication Required";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(201);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addIntHeader("&qQgJ-m=VcsEWJ", (-4138));
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      int int0 = httpServletResponseImpl0.getBufferSize();
      assertEquals(8192, int0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = "Proxy Authentication Required";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(201);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(0);
      assertEquals("HTTP Response Status 0", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.resetBuffer();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.resetBuffer();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertEquals("HTTP/1.0 200 OK\r\n\r\n", string1);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      int int0 = httpServletResponseImpl0.getBufferSize();
      assertEquals(8192, int0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.addIntHeader("MA.d**", (-1550));
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setStatus(409);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = httpServletResponseImpl0.getCharacterEncoding();
      assertEquals("ISO-8859-1", string0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
      
      boolean boolean0 = httpServletResponseImpl0.isCommitted();
      assertFalse(boolean0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(printWriter0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      Integer integer0 = new Integer((-285186159));
      assertEquals((-285186159), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\nContent-Length: -285186159\r\n\r\n", string0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(string0);
      
      String string1 = "rjs6ddh\\";
      boolean boolean0 = httpServletResponseImpl0.containsHeader("rjs6ddh");
      assertFalse(boolean0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      httpServletResponseImpl0.setContentLength(3346);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addHeader("charset=text/htm", "US-ASCII");
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\ncontent-length: 3346\r\ncharset=text/htm: -285186159\r\ncharset=text/htm: US-ASCII\r\n\r\n", string2);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream1, servletOutputStream0);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream1);
      
      ServletOutputStream servletOutputStream2 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream2, servletOutputStream0);
      assertSame(servletOutputStream2, servletOutputStream1);
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream2);
      
      String string3 = HttpServletResponseImpl.getStatusMessage(304);
      assertEquals("Not Modified", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("@uDpA7eP.Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      Integer integer0 = new Integer((-285186159));
      assertEquals((-285186159), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\nContent-Length: -285186159\r\n\r\n", string0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(string0);
      
      String string1 = "rjs6ddh\\";
      int int0 = Integer.max(503, (-1196));
      assertEquals(503, int0);
      
      boolean boolean0 = httpServletResponseImpl0.containsHeader("rjs6ddh");
      assertFalse(boolean0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNull(locale0);
      
      httpServletResponseImpl0.setContentLength(3346);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertEquals("HTTP/1.0 200 OK\r\ncontent-length: 3346\r\n\r\n", string2);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream1, servletOutputStream0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream1);
      
      ServletOutputStream servletOutputStream2 = httpServletResponseImpl0.getOutputStream();
      assertSame(servletOutputStream2, servletOutputStream0);
      assertSame(servletOutputStream2, servletOutputStream1);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream2);
      
      String string3 = HttpServletResponseImpl.getStatusMessage(503);
      assertEquals("Service Unavailable", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("@uDpA7eP.Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setStatus(412);
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setStatus(500);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 409;
      String string0 = HttpServletResponseImpl.getStatusMessage(409);
      assertEquals("Conflict", string0);
      assertNotNull(string0);
      
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("Conflict");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(507);
      assertEquals("Insufficient Storage", string0);
      assertNotNull(string0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      byte[] byteArray0 = new byte[0];
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: []
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(205);
      assertEquals("Reset Content", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      PrintWriter printWriter0 = httpServletResponseImpl0.getWriter();
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(printWriter0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError(423);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.flushBuffer();
      httpServletResponseImpl0.reset();
      httpServletResponseImpl0.sendError(0, "");
      Integer integer0 = new Integer(0);
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.flushBuffer();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "G~@");
      httpServletResponseImpl0.getContentType();
      httpServletResponseImpl0.getCharacterEncoding();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.resetBuffer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The ServletOutputStream is already committed. A reset is no longer possible.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      Integer integer0 = new Integer((-285186159));
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.containsHeader("HTTP/1.0 200 OK\r\nContent-Length: -285186159\r\n\r\n");
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setContentLength(3346);
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      httpServletResponseImpl0.addHeader("charset=text/htm", "US-ASCII");
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getOutputStream();
      HttpServletResponseImpl.getStatusMessage(304);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("@uDpA7eP.Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.sendError((-441));
      httpServletResponseImpl0.setContentLength((-1));
      httpServletResponseImpl0.containsHeader("");
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getContentType();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addDateHeader((String) null, 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      httpServletResponseImpl0.getWriter();
      int int0 = (-364);
      HttpServletResponseImpl.getStatusMessage((-364));
      httpServletResponseImpl0.setContentType("HTTP Response Status -364");
      int int1 = (-1858);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addIntHeader((String) null, (-1858));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      Integer integer0 = new Integer((-285186159));
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.containsHeader("rjs6ddh");
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setContentLength(3346);
      String string0 = "charset=text/htm";
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getOutputStream();
      HttpServletResponseImpl.getStatusMessage(304);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setDateHeader("b{Ut7fFj@(c;|", (-1L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      Integer integer0 = new Integer((-285186159));
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.containsHeader("rjs6ddh");
      httpServletResponseImpl0.getLocale();
      httpServletResponseImpl0.setContentLength(3346);
      httpServletResponseImpl0.setIntHeader("charset=text/htm", (-285186159));
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getHttpHeaders(integer0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getOutputStream();
      HttpServletResponseImpl.getStatusMessage(304);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectUrl("b{Ut7fFj@(c;|");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      Socket socket1 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(socket1).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl1 = new HttpServletResponseImpl(socket1);
      ServletOutputStream servletOutputStream1 = httpServletResponseImpl1.getOutputStream();
      Socket socket2 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream1).when(socket2).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl2 = new HttpServletResponseImpl(socket2);
      httpServletResponseImpl2.setContentType("charset=gb,{k");
      int int0 = 2459;
      try { 
        httpServletResponseImpl2.sendError(408);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket();
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(socket0).getOutputStream();
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(socket0);
      int int0 = 535;
      httpServletResponseImpl0.setContentLength(535);
      String string0 = "LY`";
      httpServletResponseImpl0.containsHeader("LY`");
      httpServletResponseImpl0.setStatus(0);
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.getLocale();
      String string1 = "UZjNKLW[_)";
      httpServletResponseImpl0.sendError(201, "/SJV", "UZjNKLW[_)");
      HttpServletResponseImpl.getStatusMessage(300);
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(422);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }
}
