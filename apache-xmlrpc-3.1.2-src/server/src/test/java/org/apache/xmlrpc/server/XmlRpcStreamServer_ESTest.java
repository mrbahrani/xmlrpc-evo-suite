/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 01 07:48:59 GMT 2021
 */

package org.apache.xmlrpc.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.ZipException;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.common.ServerStreamConnection;
import org.apache.xmlrpc.common.TypeConverterFactory;
import org.apache.xmlrpc.common.TypeFactory;
import org.apache.xmlrpc.common.XmlRpcStreamRequestConfig;
import org.apache.xmlrpc.serializer.XmlWriterFactory;
import org.apache.xmlrpc.server.XmlRpcErrorLogger;
import org.apache.xmlrpc.server.XmlRpcHandlerMapping;
import org.apache.xmlrpc.server.XmlRpcLocalStreamServer;
import org.apache.xmlrpc.server.XmlRpcServerConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcStreamServer_ESTest extends XmlRpcStreamServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcServerConfig xmlRpcServerConfig0 = mock(XmlRpcServerConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.setConfig(xmlRpcServerConfig0);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(464, 902, 205, 0).when(inputStream0).read();
      doReturn("(^b").when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig2, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig1).getEncoding();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig2, serverStreamConnection0, 1267);
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig1, outputStream1, (Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to write XML-RPC response: Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      int int0 = 61;
      int int1 = 2444;
      int int2 = (-3340);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig1, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(inputStream0).read();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      try { 
        xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(34, 1998, 0, 0).when(inputStream0).read();
      doReturn((String) null).when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig0, inputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse XML-RPC request: Invalid byte 2 of 2-byte UTF-8 sequence.
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig1).getEncoding();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((String) null).when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig2, outputStream0);
      ServerStreamConnection serverStreamConnection2 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream1).when(serverStreamConnection2).newOutputStream();
      boolean boolean0 = true;
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig3).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig3).isGzipRequesting();
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig3, serverStreamConnection2, 1);
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection2, xmlRpcStreamRequestConfig3, outputStream2);
      xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig1, outputStream2);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2188), 1, (-93), (-93)).when(inputStream0).read();
      doReturn("execute: ->").when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig2, inputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse XML-RPC request: Invalid byte 1 of 1-byte UTF-8 sequence.
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig0).isGzipRequesting();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig1).isGzipRequesting();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig1, outputStream0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream1).when(serverStreamConnection1).newOutputStream();
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection1, 162);
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig0, outputStream2);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig2).isGzipCompressing();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig3).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig3).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).read();
      doReturn((String) null).when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection2 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection2).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig3, serverStreamConnection2);
      ServerStreamConnection serverStreamConnection3 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream1).when(serverStreamConnection3).newInputStream();
      try { 
        xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection3);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.setXMLWriterFactory(xmlWriterFactory0);
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn("J^[C").when(xmlRpcStreamRequestConfig0).getEncoding();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((String) null).when(inputStream0).toString();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig1).isGzipRequesting();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig2).isGzipRequesting();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream((ServerStreamConnection) null, xmlRpcStreamRequestConfig2, outputStream0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream1).when(serverStreamConnection1).newOutputStream();
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig1, serverStreamConnection1, 692);
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig1, outputStream2);
      TypeFactory typeFactory0 = xmlRpcLocalStreamServer0.getTypeFactory();
      assertNotNull(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn("Iu").when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      OutputStream outputStream1 = xmlRpcLocalStreamServer1.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig1).isGzipCompressing();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig3).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection1).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig3, serverStreamConnection1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig4 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(xmlRpcStreamRequestConfig4).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig4).getEncoding();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      doReturn((String) null, (String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      xmlRpcLocalStreamServer0.writeError(xmlRpcStreamRequestConfig4, outputStream1, throwable1);
      ServerStreamConnection serverStreamConnection2 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection2).newInputStream();
      xmlRpcLocalStreamServer1.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection2);
      ServerStreamConnection serverStreamConnection3 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection3).newInputStream();
      InputStream inputStream0 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig1, serverStreamConnection3);
      try { 
        xmlRpcLocalStreamServer1.getRequest(xmlRpcStreamRequestConfig1, inputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read XML-RPC request: null
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      assertEquals(0, xmlRpcLocalStreamServer0.getMaxThreads());
      
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn("9N").when(xmlRpcStreamRequestConfig0).getEncoding();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipRequesting();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      OutputStream outputStream1 = xmlRpcLocalStreamServer1.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, (-2522));
      OutputStream outputStream2 = xmlRpcLocalStreamServer1.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig0, outputStream1);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn("hGl4y}F4 +(").when(throwable0).getMessage();
      doReturn("hGl4y}F4 +(", "").when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcStreamRequestConfig0, outputStream2, throwable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: 9N
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn(">K<S}<E%WY,U").when(xmlRpcStreamRequestConfig1).getEncoding();
      doReturn(false).when(xmlRpcStreamRequestConfig1).isGzipRequesting();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream((ServerStreamConnection) null, xmlRpcStreamRequestConfig2, outputStream0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream1).when(serverStreamConnection1).newOutputStream();
      int int0 = 692;
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig1, serverStreamConnection1, 692);
      OutputStream outputStream3 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig1, outputStream2);
      TypeFactory typeFactory0 = xmlRpcLocalStreamServer0.getTypeFactory();
      xmlRpcLocalStreamServer0.setTypeFactory(typeFactory0);
      try { 
        xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig1, outputStream3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: >K<S}<E%WY,U
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      TypeFactory typeFactory0 = xmlRpcLocalStreamServer1.getTypeFactory();
      xmlRpcLocalStreamServer1.setTypeFactory(typeFactory0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn("m").when(xmlRpcStreamRequestConfig0).getEncoding();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer1.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig1, outputStream0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream1).when(serverStreamConnection1).newOutputStream();
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection1, 406);
      OutputStream outputStream3 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig0, outputStream2);
      try { 
        xmlRpcLocalStreamServer1.writeResponse(xmlRpcStreamRequestConfig0, outputStream3, outputStream3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: m
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn("J_4>").when(xmlRpcStreamRequestConfig0).getEncoding();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipRequesting();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      OutputStream outputStream1 = xmlRpcLocalStreamServer1.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, (-1207));
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig0, outputStream1);
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig0, outputStream2, outputStream2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: J_4>
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((String) null).when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig2, inputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse XML-RPC request: Content is not allowed in prolog.
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig0, (InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read XML-RPC request: null
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.getDefaultXmlRpcWorkerFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig1);
      xmlRpcLocalStreamServer0.convertThrowable((Throwable) null);
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig2, serverStreamConnection0, 1988);
      OutputStream outputStream0 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig2, (OutputStream) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig0, (OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig1).getEncoding();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig1, (OutputStream) null, xmlRpcStreamRequestConfig1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      xmlRpcLocalStreamServer0.convertThrowable(throwable1);
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer1.getErrorLogger();
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer1.setXMLWriterFactory(xmlWriterFactory0);
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = null;
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer2 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer2.getOutputStream((XmlRpcStreamRequestConfig) null, serverStreamConnection0, 1497);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer1.getOutputStream(serverStreamConnection0, (XmlRpcStreamRequestConfig) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      int int0 = 92;
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 92);
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig0, (OutputStream) null);
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig1, (OutputStream) null);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.logError((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.getDefaultXmlRpcWorkerFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 7);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection1 = null;
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig2, (ServerStreamConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 503);
      xmlRpcLocalStreamServer0.getHandlerMapping();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      xmlRpcLocalStreamServer0.setHandlerMapping((XmlRpcHandlerMapping) null);
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection1).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection1);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      doReturn((String) null, (String) null, (String) null, (String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      Throwable throwable2 = xmlRpcLocalStreamServer0.convertThrowable(throwable1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig3).getEncoding();
      Throwable throwable3 = xmlRpcLocalStreamServer0.convertThrowable(throwable2);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcStreamRequestConfig3, (OutputStream) null, throwable3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      doReturn((String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer1.convertThrowable(throwable0);
      xmlRpcLocalStreamServer0.logError(throwable1);
      assertFalse(xmlRpcLocalStreamServer1.equals((Object)xmlRpcLocalStreamServer0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.logError((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getDefaultXmlRpcWorkerFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig1).getEncoding();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig1, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig0, (InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read XML-RPC request: null
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection1 = null;
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig2, (ServerStreamConnection) null, 2019);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = null;
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = null;
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, (ServerStreamConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcServerConfig xmlRpcServerConfig0 = mock(XmlRpcServerConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.setConfig(xmlRpcServerConfig0);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(464, 902, 236, 0).when(inputStream0).read();
      doReturn("(^b").when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig2, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.getTypeFactory();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      assertEquals(0, xmlRpcLocalStreamServer0.getMaxThreads());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(464, 902, 205, 0).when(inputStream0).read();
      doReturn("(^b").when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig0, inputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse XML-RPC request: Invalid byte 2 of 2-byte UTF-8 sequence.
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer1.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig0, (OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig3).isEnabledForExtensions();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).read();
      doReturn((String) null, (String) null, (String) null).when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer1.getInputStream(xmlRpcStreamRequestConfig3, serverStreamConnection0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream1).when(serverStreamConnection1).newInputStream();
      InputStream inputStream2 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection1);
      ServerStreamConnection serverStreamConnection2 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream2).when(serverStreamConnection2).newInputStream();
      InputStream inputStream3 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection2);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig4 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig4);
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.setXMLWriterFactory(xmlWriterFactory0);
      ServerStreamConnection serverStreamConnection3 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig5 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig5).isEnabledForExtensions();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection3, xmlRpcStreamRequestConfig5, outputStream0);
      ServerStreamConnection serverStreamConnection4 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream3).when(serverStreamConnection4).newInputStream();
      doReturn(outputStream1).when(serverStreamConnection4).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig6 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig6).getEncoding();
      xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig6, outputStream1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig7 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig7).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig7).getEncoding();
      xmlRpcLocalStreamServer1.writeResponse(xmlRpcStreamRequestConfig7, outputStream1, "");
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig8 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false, false).when(xmlRpcStreamRequestConfig8).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig8).getEncoding();
      doReturn(true).when(xmlRpcStreamRequestConfig8).isGzipCompressing();
      doReturn(true).when(xmlRpcStreamRequestConfig8).isGzipRequesting();
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig8, serverStreamConnection4);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig9 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig9).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig9).getEncoding();
      ServerStreamConnection serverStreamConnection5 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection5).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection5).newOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig9, serverStreamConnection5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      doReturn((String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      xmlRpcLocalStreamServer0.logError(throwable1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig1);
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig2).getEncoding();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer1.execute(xmlRpcStreamRequestConfig2, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      doReturn((String) null, (String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcStreamRequestConfig0, (OutputStream) null, throwable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.setXMLWriterFactory(xmlWriterFactory0);
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn("execute: <-").when(xmlRpcStreamRequestConfig0).getEncoding();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipRequesting();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((String) null).when(inputStream0).toString();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: execute: <-
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.setXMLWriterFactory(xmlWriterFactory0);
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.setTypeFactory((TypeFactory) null);
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection1).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig1, serverStreamConnection1);
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig1, (InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read XML-RPC request: null
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }
}
