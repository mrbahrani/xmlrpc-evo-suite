/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 08:20:16 GMT 2021
 */

package org.apache.xmlrpc.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.apache.xmlrpc.XmlRpcException;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.common.ServerStreamConnection;
import org.apache.xmlrpc.common.TypeConverterFactory;
import org.apache.xmlrpc.common.TypeFactory;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcStreamRequestConfig;
import org.apache.xmlrpc.serializer.BaseXmlWriterFactory;
import org.apache.xmlrpc.serializer.CharSetXmlWriterFactory;
import org.apache.xmlrpc.serializer.XmlWriterFactory;
import org.apache.xmlrpc.server.XmlRpcErrorLogger;
import org.apache.xmlrpc.server.XmlRpcHandlerMapping;
import org.apache.xmlrpc.server.XmlRpcLocalStreamServer;
import org.apache.xmlrpc.server.XmlRpcServerConfigImpl;
import org.apache.xmlrpc.server.XmlRpcStreamServer;
import org.apache.xmlrpc.webserver.Connection;
import org.apache.xmlrpc.webserver.RequestData;
import org.apache.xmlrpc.webserver.WebServer;
import org.apache.xmlrpc.webserver.XmlRpcServletServer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcStreamServer_ESTest extends XmlRpcStreamServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setXMLWriterFactory((XmlWriterFactory) null);
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcException xmlRpcException0 = new XmlRpcException("\" was loaded by [");
      xmlRpcLocalStreamServer0.logError(xmlRpcException0);
      assertEquals(0, xmlRpcLocalStreamServer0.getMaxThreads());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(inputStream0).read();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      try { 
        xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(34, 1998).when(inputStream0).read();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      try { 
        xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // codegen.java.io.InputStream$MockitoMock$1195318025.read() returned value out of range -1..255: 1998
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn("Iu").when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      OutputStream outputStream1 = xmlRpcLocalStreamServer1.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig1).isGzipCompressing();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig3).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection1).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig3, serverStreamConnection1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig4 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(xmlRpcStreamRequestConfig4).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig4).getEncoding();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      doReturn((String) null, (String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      xmlRpcLocalStreamServer0.writeError(xmlRpcStreamRequestConfig4, outputStream1, throwable1);
      ServerStreamConnection serverStreamConnection2 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection2).newInputStream();
      xmlRpcLocalStreamServer1.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection2);
      ServerStreamConnection serverStreamConnection3 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection3).newInputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig1, serverStreamConnection3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig1).getEncoding();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig2, serverStreamConnection0, 1267);
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig1, outputStream1, (Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to write XML-RPC response: Null values aren't supported, if isEnabledForExtensions() == false
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl1 = xmlRpcClientConfigImpl0.cloneMe();
      OutputStream outputStream0 = xmlRpcLocalStreamServer0.getOutputStream((ServerStreamConnection) null, xmlRpcClientConfigImpl1, (OutputStream) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.convertThrowable((Throwable) null);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcHttpRequestConfigImpl0, pipedOutputStream0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn(">K<S}<E%WY,U").when(xmlRpcStreamRequestConfig1).getEncoding();
      doReturn(false).when(xmlRpcStreamRequestConfig1).isGzipRequesting();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream((ServerStreamConnection) null, xmlRpcStreamRequestConfig2, outputStream0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream1).when(serverStreamConnection1).newOutputStream();
      int int0 = 692;
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig1, serverStreamConnection1, 692);
      OutputStream outputStream3 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig1, outputStream2);
      TypeFactory typeFactory0 = xmlRpcLocalStreamServer0.getTypeFactory();
      xmlRpcLocalStreamServer0.setTypeFactory(typeFactory0);
      try { 
        xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig1, outputStream3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: >K<S}<E%WY,U
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig0, (OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      xmlRpcLocalStreamServer0.convertThrowable(throwable1);
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer1.getErrorLogger();
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer1.setXMLWriterFactory(xmlWriterFactory0);
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = null;
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer2 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer2.getOutputStream((XmlRpcStreamRequestConfig) null, serverStreamConnection0, 1497);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer1.getOutputStream(serverStreamConnection0, (XmlRpcStreamRequestConfig) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      int int0 = 92;
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 92);
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig0, (OutputStream) null);
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig1, (OutputStream) null);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.logError((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig0, (InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to read XML-RPC request: null
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 503);
      xmlRpcLocalStreamServer0.getHandlerMapping();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      xmlRpcLocalStreamServer0.setHandlerMapping((XmlRpcHandlerMapping) null);
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection1).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection1);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      doReturn((String) null, (String) null, (String) null, (String) null).when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      Throwable throwable2 = xmlRpcLocalStreamServer0.convertThrowable(throwable1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig3).getEncoding();
      Throwable throwable3 = xmlRpcLocalStreamServer0.convertThrowable(throwable2);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcStreamRequestConfig3, (OutputStream) null, throwable3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.getDefaultXmlRpcWorkerFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig1).getEncoding();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig1, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcException xmlRpcException0 = new XmlRpcException(0, "IdB?* 2s}x-S b=8r(");
      xmlRpcLocalStreamServer0.logError(xmlRpcException0);
      assertEquals(0, xmlRpcLocalStreamServer0.getMaxThreads());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WebServer webServer0 = new WebServer((-3261));
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = xmlRpcStreamServer0.convertThrowable(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection1 = null;
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig2, (ServerStreamConnection) null, 2019);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WebServer webServer0 = new WebServer(2179);
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      // Undeclared exception!
      try { 
        xmlRpcStreamServer0.writeResponse(xmlRpcClientConfigImpl0, (OutputStream) null, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.client.XmlRpcClientConfigImpl cannot be cast to org.apache.xmlrpc.webserver.RequestData
         //
         verifyException("org.apache.xmlrpc.webserver.ConnectionServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = null;
      WebServer webServer0 = new WebServer((-68), (InetAddress) null);
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      OutputStream outputStream0 = null;
      XmlRpcException xmlRpcException0 = new XmlRpcException((-68), "mEOp53L*SuTgdgue");
      XmlRpcException xmlRpcException1 = new XmlRpcException("authorization:", xmlRpcException0);
      // Undeclared exception!
      try { 
        xmlRpcStreamServer0.writeError(xmlRpcClientConfigImpl0, (OutputStream) null, xmlRpcException1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.client.XmlRpcClientConfigImpl cannot be cast to org.apache.xmlrpc.webserver.RequestData
         //
         verifyException("org.apache.xmlrpc.webserver.ConnectionServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w$b0k2O%ABG=9;0");
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcException xmlRpcException0 = new XmlRpcException("");
      String string0 = "";
      XmlRpcException xmlRpcException1 = new XmlRpcException(0, "", xmlRpcException0);
      Throwable throwable0 = xmlRpcException0.initCause(xmlRpcException1);
      xmlRpcException1.toString();
      xmlRpcException0.addSuppressed(xmlRpcException1);
      xmlRpcLocalStreamServer0.convertThrowable(xmlRpcException0);
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcErrorLogger0.log("");
      xmlRpcErrorLogger0.log("");
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("org.evosuite.runtime.mock.java.lang.MockThrowable: ");
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcHttpRequestConfigImpl0, pipedOutputStream0, throwable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to write XML-RPC response: Failed to flush target writer: Pipe not connected
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getCharacterEncoding();
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      doReturn((String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((Enumeration) null).when(httpServletRequest0).getHeaders(anyString());
      doReturn((String) null).when(httpServletRequest0).getRequestedSessionId();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.getRequestedSessionId();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null, (ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        xmlRpcServletServer0.execute((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      int int0 = (-157);
      CharSetXmlWriterFactory charSetXmlWriterFactory0 = new CharSetXmlWriterFactory();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      MockFile mockFile0 = new MockFile("4_", "4_");
      // Undeclared exception!
      try { 
        xmlRpcServletServer0.execute((XmlRpcStreamRequestConfig) xmlRpcClientConfigImpl0, (ServerStreamConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.XmlRpcServletServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      BaseXmlWriterFactory baseXmlWriterFactory0 = new BaseXmlWriterFactory();
      xmlRpcLocalStreamServer0.setXMLWriterFactory(baseXmlWriterFactory0);
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XmlRpcException xmlRpcException0 = new XmlRpcException("s?HirTO'k");
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcClientConfigImpl0, pipedOutputStream0, xmlRpcException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to write XML-RPC response: Failed to flush target writer: Pipe not connected
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.setXMLWriterFactory(xmlWriterFactory0);
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn("J^[C").when(xmlRpcStreamRequestConfig0).getEncoding();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((String) null).when(inputStream0).toString();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: J^[C
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = null;
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection0 = null;
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, (ServerStreamConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setErrorLogger((XmlRpcErrorLogger) null);
      xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.getErrorLogger();
      XmlRpcServerConfigImpl xmlRpcServerConfigImpl0 = new XmlRpcServerConfigImpl();
      xmlRpcLocalStreamServer0.setConfig(xmlRpcServerConfigImpl0);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(464, 902, 236, 0).when(inputStream0).read();
      doReturn("(^b").when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute((XmlRpcStreamRequestConfig) xmlRpcHttpRequestConfigImpl0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.getTypeFactory();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      doReturn(outputStream0).when(serverStreamConnection0).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      assertEquals(0, xmlRpcLocalStreamServer0.getMaxThreads());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer1.execute((XmlRpcRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcLocalStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer1 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig3).isEnabledForExtensions();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).read();
      doReturn((String) null, (String) null, (String) null).when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection0).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer1.getInputStream(xmlRpcStreamRequestConfig3, serverStreamConnection0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream1).when(serverStreamConnection1).newInputStream();
      InputStream inputStream2 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection1);
      ServerStreamConnection serverStreamConnection2 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream2).when(serverStreamConnection2).newInputStream();
      InputStream inputStream3 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection2);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig4 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcStreamRequestConfig4);
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcLocalStreamServer0.getErrorLogger();
      xmlRpcLocalStreamServer0.setErrorLogger(xmlRpcErrorLogger0);
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.setXMLWriterFactory(xmlWriterFactory0);
      ServerStreamConnection serverStreamConnection3 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig5 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig5).isEnabledForExtensions();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection3, xmlRpcStreamRequestConfig5, outputStream0);
      ServerStreamConnection serverStreamConnection4 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream3).when(serverStreamConnection4).newInputStream();
      doReturn(outputStream1).when(serverStreamConnection4).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig6 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig6).getEncoding();
      xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig6, outputStream1);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig7 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig7).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig7).getEncoding();
      xmlRpcLocalStreamServer1.writeResponse(xmlRpcStreamRequestConfig7, outputStream1, "");
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig8 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false, false).when(xmlRpcStreamRequestConfig8).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig8).getEncoding();
      doReturn(true).when(xmlRpcStreamRequestConfig8).isGzipCompressing();
      doReturn(true).when(xmlRpcStreamRequestConfig8).isGzipRequesting();
      xmlRpcLocalStreamServer0.getXMLWriterFactory();
      xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig8, serverStreamConnection4);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig9 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig9).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig9).getEncoding();
      ServerStreamConnection serverStreamConnection5 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection5).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection5).newOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig9, serverStreamConnection5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipRequesting();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig1 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig1).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig1).isGzipRequesting();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn("u[hdwG}3I;r", "u[hdwG}3I;r", (String) null).when(outputStream0).toString();
      OutputStream outputStream1 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig1, outputStream0);
      ServerStreamConnection serverStreamConnection1 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream1).when(serverStreamConnection1).newOutputStream();
      OutputStream outputStream2 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection1, 162);
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection1, xmlRpcStreamRequestConfig0, outputStream2);
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig2 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig2).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig2).isGzipCompressing();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig3 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig3).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig3).isGzipCompressing();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).read();
      doReturn((String) null).when(inputStream0).toString();
      ServerStreamConnection serverStreamConnection2 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(serverStreamConnection2).newInputStream();
      InputStream inputStream1 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig3, serverStreamConnection2);
      ServerStreamConnection serverStreamConnection3 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream1).when(serverStreamConnection3).newInputStream();
      try { 
        xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig2, serverStreamConnection3);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }
}
