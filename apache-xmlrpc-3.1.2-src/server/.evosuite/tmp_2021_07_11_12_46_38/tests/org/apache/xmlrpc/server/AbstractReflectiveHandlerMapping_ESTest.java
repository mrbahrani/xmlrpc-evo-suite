/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 08:20:21 GMT 2021
 */

package org.apache.xmlrpc.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.xmlrpc.XmlRpcHandler;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.XmlRpcClientRequestImpl;
import org.apache.xmlrpc.common.TypeConverterFactory;
import org.apache.xmlrpc.metadata.ReflectiveXmlRpcMetaDataHandler;
import org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping;
import org.apache.xmlrpc.server.PropertyHandlerMapping;
import org.apache.xmlrpc.server.ReflectiveXmlRpcHandler;
import org.apache.xmlrpc.server.RequestProcessorFactoryFactory;
import org.apache.xmlrpc.server.XmlRpcLocalStreamServer;
import org.apache.xmlrpc.server.XmlRpcStreamServer;
import org.apache.xmlrpc.webserver.Connection;
import org.apache.xmlrpc.webserver.RequestData;
import org.apache.xmlrpc.webserver.WebServer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractReflectiveHandlerMapping_ESTest extends AbstractReflectiveHandlerMapping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.registerPublicMethods((String) null, (Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0 = new RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0);
      
      Class<String> class0 = String.class;
      RequestProcessorFactoryFactory.RequestProcessorFactory requestProcessorFactoryFactory_RequestProcessorFactory0 = requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0.getRequestProcessorFactory(class0);
      assertNotNull(requestProcessorFactoryFactory_RequestProcessorFactory0);
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = null;
      Class<Method> class1 = Method.class;
      try { 
        propertyHandlerMapping0.registerPublicMethods((String) null, class1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to instantiate class java.lang.reflect.Method
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = "rp_";
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.registerPublicMethods("rp_", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid parameter or result type: java.nio.charset.Charset
         //
         verifyException("org.apache.xmlrpc.common.TypeConverterFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Integer> class0 = Integer.class;
      propertyHandlerMapping0.registerPublicMethods("W$1eDb#yT3&,", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Method> class0 = Class.class;
      Method[] methodArray0 = new Method[0];
      String string0 = propertyHandlerMapping0.getMethodHelp(class0, methodArray0);
      assertEquals(0, methodArray0.length);
      assertNull(string0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<String> class1 = Class.class;
      propertyHandlerMapping0.addHandler("", class1);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      URL uRL0 = null;
      String string0 = "W4/gfXS";
      classLoader0.setClassAssertionStatus("W4/gfXS", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader0.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      String string1 = "org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping";
      try { 
        propertyHandlerMapping0.getMethodSignature("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = null;
      String string0 = "z?e*}CUN)}";
      Class<ReflectiveXmlRpcMetaDataHandler> class0 = Class.class;
      propertyHandlerMapping0.registerPublicMethods("z?e*}CUN)}", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getMethodHelp("z?e*}CUN)}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: z?e*}CUN)}
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Method[] methodArray0 = new Method[0];
      String[][] stringArray0 = propertyHandlerMapping0.getSignature(methodArray0);
      assertEquals(0, methodArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.removeHandler("");
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getHandler("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: 
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.handlerMap = null;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getMethodHelp("}N?|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String[] stringArray0 = propertyHandlerMapping0.getListMethods();
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.handlerMap = null;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getMethodSignature("V{{5D$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getMethodHelp("=rM");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: =rM
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Integer> class0 = Class.class;
      Method[] methodArray0 = new Method[0];
      String string0 = propertyHandlerMapping0.getMethodHelp(class0, methodArray0);
      assertEquals(0, methodArray0.length);
      assertNull(string0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertTrue(boolean0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string0 = "JK63W'Z~:R";
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      try { 
        propertyHandlerMapping0.load(classLoader1, "JK63W'Z~:R");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to locate resource JK63W'Z~:R
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertFalse(boolean0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Method[] methodArray0 = null;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getSignature((Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(false);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Integer> class0 = Class.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getMethodHelp(class0, (Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.removeHandler("");
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Object> class0 = Class.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.newXmlRpcHandler(class0, (Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      WebServer webServer0 = new WebServer(0);
      assertNotNull(webServer0);
      
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      assertNotNull(xmlRpcStreamServer0);
      assertEquals(0, xmlRpcStreamServer0.getMaxThreads());
      
      TypeConverterFactory typeConverterFactory0 = xmlRpcStreamServer0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertEquals(0, xmlRpcStreamServer0.getMaxThreads());
      
      propertyHandlerMapping0.setTypeConverterFactory(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertEquals(0, xmlRpcStreamServer0.getMaxThreads());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.isHandlerMethod((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      PropertyHandlerMapping propertyHandlerMapping1 = new PropertyHandlerMapping();
      assertFalse(propertyHandlerMapping1.equals((Object)propertyHandlerMapping0));
      assertNotNull(propertyHandlerMapping1);
      assertFalse(propertyHandlerMapping1.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping1.getRequestProcessorFactoryFactory();
      assertFalse(propertyHandlerMapping1.equals((Object)propertyHandlerMapping0));
      assertNotSame(propertyHandlerMapping1, propertyHandlerMapping0);
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping1.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.equals((Object)propertyHandlerMapping1));
      assertFalse(propertyHandlerMapping1.equals((Object)propertyHandlerMapping0));
      assertNotSame(propertyHandlerMapping0, propertyHandlerMapping1);
      assertNotSame(propertyHandlerMapping1, propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertFalse(propertyHandlerMapping1.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Object> class0 = Class.class;
      Method[] methodArray0 = new Method[0];
      XmlRpcHandler xmlRpcHandler0 = propertyHandlerMapping0.newXmlRpcHandler(class0, methodArray0);
      assertEquals(0, methodArray0.length);
      assertNotNull(xmlRpcHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory.RequestSpecificProcessorFactoryFactory requestProcessorFactoryFactory_RequestSpecificProcessorFactoryFactory0 = new RequestProcessorFactoryFactory.RequestSpecificProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory_RequestSpecificProcessorFactoryFactory0);
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory_RequestSpecificProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getMethodHelp("org.apache.xmlrpc.client.XmlRpcSun14HttpTransportFactory");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: org.apache.xmlrpc.client.XmlRpcSun14HttpTransportFactory
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Integer> class0 = Class.class;
      propertyHandlerMapping0.addHandler("incgrr+ct scYeme", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String[] stringArray0 = propertyHandlerMapping0.getListMethods();
      assertEquals(62, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Method>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, Method>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      propertyHandlerMapping0.handlerMap = (Map) hashMap0;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(propertyHandlerMapping0.handlerMap.isEmpty());
      assertEquals(0, propertyHandlerMapping0.handlerMap.size());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getMethodSignature((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: null
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Method> class0 = Class.class;
      Method[] methodArray0 = new Method[0];
      String string0 = propertyHandlerMapping0.getMethodHelp(class0, methodArray0);
      assertEquals(0, methodArray0.length);
      assertNull(string0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<String> class1 = Class.class;
      propertyHandlerMapping0.addHandler("", class1);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<ReflectiveXmlRpcMetaDataHandler> class2 = ReflectiveXmlRpcMetaDataHandler.class;
      XmlRpcHandler xmlRpcHandler0 = propertyHandlerMapping0.newXmlRpcHandler(class2, methodArray0);
      assertEquals(0, methodArray0.length);
      assertNotNull(xmlRpcHandler0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Integer> class0 = Integer.class;
      propertyHandlerMapping0.addHandler("*", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertFalse(boolean0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean1 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler1 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler1);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler2 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler2);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean2 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getHandler("JK63W'Z~:R");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: JK63W'Z~:R
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }
}
