/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 10:40:59 GMT 2021
 */

package org.apache.xmlrpc.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.xmlrpc.XmlRpcHandler;
import org.apache.xmlrpc.XmlRpcRequest;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfig;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.XmlRpcClientRequestImpl;
import org.apache.xmlrpc.common.TypeConverter;
import org.apache.xmlrpc.common.TypeConverterFactory;
import org.apache.xmlrpc.common.TypeConverterFactoryImpl;
import org.apache.xmlrpc.metadata.ReflectiveXmlRpcMetaDataHandler;
import org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping;
import org.apache.xmlrpc.server.PropertyHandlerMapping;
import org.apache.xmlrpc.server.ReflectiveXmlRpcHandler;
import org.apache.xmlrpc.server.RequestProcessorFactoryFactory;
import org.apache.xmlrpc.server.XmlRpcServer;
import org.apache.xmlrpc.server.XmlRpcStreamServer;
import org.apache.xmlrpc.webserver.WebServer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractReflectiveHandlerMapping_ESTest extends AbstractReflectiveHandlerMapping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<String, AbstractMap.SimpleImmutableEntry<InputStream, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<InputStream, Object>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      propertyHandlerMapping0.handlerMap = (Map) hashMap0;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, propertyHandlerMapping0.handlerMap.size());
      assertTrue(propertyHandlerMapping0.handlerMap.isEmpty());
      
      String[] stringArray0 = propertyHandlerMapping0.getListMethods();
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = true;
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<ReflectiveXmlRpcHandler> class0 = ReflectiveXmlRpcHandler.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.registerPublicMethods("f|,pc", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid parameter or result type: org.apache.xmlrpc.XmlRpcRequest
         //
         verifyException("org.apache.xmlrpc.common.TypeConverterFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<InputStream> class0 = InputStream.class;
      propertyHandlerMapping0.registerPublicMethods("", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(false);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String[] stringArray0 = propertyHandlerMapping0.getListMethods();
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Method> class0 = Method.class;
      propertyHandlerMapping0.registerPublicMethods("QJ\"=NE\td.;wi+0", class0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      HashMap<Integer, ReflectiveXmlRpcHandler> hashMap0 = new HashMap<Integer, ReflectiveXmlRpcHandler>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      propertyHandlerMapping0.load(classLoader0, (Map) hashMap0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      propertyHandlerMapping0.load(classLoader0, (Map) hashMap0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Object> class0 = Class.class;
      Method[] methodArray0 = new Method[0];
      XmlRpcHandler xmlRpcHandler0 = propertyHandlerMapping0.newXmlRpcHandler(class0, methodArray0);
      assertEquals(0, methodArray0.length);
      assertNotNull(xmlRpcHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String[][] stringArray0 = propertyHandlerMapping0.getSignature(methodArray0);
      assertEquals(0, methodArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getHandler("No metadata available for method: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: No metadata available for method: 
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getSignature((Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = "org.apache.xmlrpc.server.PropertyHandlerMapping";
      try { 
        propertyHandlerMapping0.getMethodHelp("org.apache.xmlrpc.server.PropertyHandlerMapping");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: org.apache.xmlrpc.server.PropertyHandlerMapping
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = false;
      Class<String> class0 = Class.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.newXmlRpcHandler(class0, (Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = ".";
      Class<Integer> class0 = Class.class;
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.registerPublicMethods(".", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getHandler(".");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: .
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Integer> class0 = Class.class;
      propertyHandlerMapping0.registerPublicMethods(".", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String[] stringArray0 = propertyHandlerMapping0.getListMethods();
      assertEquals(62, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Method, String>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Method, String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      propertyHandlerMapping0.handlerMap = (Map<Object, Object>) hashMap0;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, propertyHandlerMapping0.handlerMap.size());
      assertTrue(propertyHandlerMapping0.handlerMap.isEmpty());
      
      Class<Method> class1 = Class.class;
      propertyHandlerMapping0.addHandler((String) null, class1);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try { 
        propertyHandlerMapping0.load(classLoader0, "Pu95=L,G*v'V?=,.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to locate resource Pu95=L,G*v'V?=,.
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertFalse(boolean0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      TypeConverterFactoryImpl typeConverterFactoryImpl0 = new TypeConverterFactoryImpl();
      assertNotNull(typeConverterFactoryImpl0);
      
      propertyHandlerMapping0.setTypeConverterFactory(typeConverterFactoryImpl0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<Method, ReflectiveXmlRpcMetaDataHandler> hashMap0 = new HashMap<Method, ReflectiveXmlRpcMetaDataHandler>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<String> class0 = Class.class;
      Method[] methodArray0 = new Method[0];
      String string0 = propertyHandlerMapping0.getMethodHelp(class0, methodArray0);
      assertEquals(0, methodArray0.length);
      assertNull(string0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertFalse(boolean0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = "eh;%547%W7XJ`|m";
      try { 
        propertyHandlerMapping0.getMethodSignature("eh;%547%W7XJ`|m");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: eh;%547%W7XJ`|m
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Method> class0 = Class.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getMethodHelp(class0, (Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(false);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0 = new RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0);
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      String string0 = "s_N]";
      Class<Method> class0 = Class.class;
      try { 
        propertyHandlerMapping0.registerPublicMethods("s_N]", class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal access when instantiating class java.lang.Class
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = "G1@`\\8z1kG /s`";
      propertyHandlerMapping0.handlerMap = null;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getHandler("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setTypeConverterFactory(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory((RequestProcessorFactoryFactory) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNull(requestProcessorFactoryFactory0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<Method, AbstractMap.SimpleEntry<Object, Integer>> hashMap0 = new HashMap<Method, AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      propertyHandlerMapping0.handlerMap = (Map<Object, Object>) hashMap0;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(propertyHandlerMapping0.handlerMap.isEmpty());
      assertEquals(0, propertyHandlerMapping0.handlerMap.size());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(classLoader2);
      
      classLoader1.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      propertyHandlerMapping0.load(classLoader1, (Map) hashMap0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      boolean boolean0 = propertyHandlerMapping0.isVoidMethodEnabled();
      assertTrue(boolean0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertNotNull(classLoader3);
      assertSame(classLoader3, classLoader0);
      
      String string0 = "";
      classLoader3.clearAssertionStatus();
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertSame(classLoader3, classLoader0);
      
      try { 
        propertyHandlerMapping0.newHandlerClass(classLoader3, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load class: 
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.isHandlerMethod((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.handlerMap = null;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<ReflectiveXmlRpcMetaDataHandler> class0 = Class.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.registerPublicMethods("", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.handlerMap = null;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getListMethods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      propertyHandlerMapping0.handlerMap = (Map<Object, Object>) hashMap0;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(propertyHandlerMapping0.handlerMap.isEmpty());
      assertEquals(0, propertyHandlerMapping0.handlerMap.size());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = hashMap0.put("", "");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.getMethodHelp("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.xmlrpc.XmlRpcHandler
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Method> class0 = Method.class;
      propertyHandlerMapping0.addHandler("d'", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      try { 
        propertyHandlerMapping0.load(classLoader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load class: 
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<Object> class0 = Object.class;
      propertyHandlerMapping0.registerPublicMethods("enter HttpConnectionManager.getConnectionWithTimeout(HostConfiguration, long)", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String[] stringArray0 = propertyHandlerMapping0.getListMethods();
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      propertyHandlerMapping0.handlerMap = (Map) hashMap0;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(propertyHandlerMapping0.handlerMap.isEmpty());
      assertEquals(0, propertyHandlerMapping0.handlerMap.size());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      propertyHandlerMapping0.setVoidMethodEnabled(true);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", set0);
      assertFalse(set0.contains(""));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = hashMap0.put("1\"!Ed9?I", abstractMap_SimpleImmutableEntry0);
      assertFalse(set0.contains(""));
      assertTrue(set0.contains("1\"!Ed9?I"));
      assertNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      String string0 = "";
      Class<Integer> class0 = Class.class;
      propertyHandlerMapping0.registerPublicMethods("", class0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      assertNotNull(xmlRpcClientConfigImpl0);
      assertNull(xmlRpcClientConfigImpl0.getBasicUserName());
      assertNull(xmlRpcClientConfigImpl0.getEncoding());
      assertNull(xmlRpcClientConfigImpl0.getUserAgent());
      assertNull(xmlRpcClientConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcClientConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcClientConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcClientConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcClientConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcClientConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcClientConfigImpl0.isGzipCompressing());
      
      String[] stringArray1 = propertyHandlerMapping0.getListMethods();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(62, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(propertyHandlerMapping0.isVoidMethodEnabled());
      
      classLoader0.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl1 = xmlRpcClientConfigImpl0.cloneMe();
      assertFalse(xmlRpcClientConfigImpl1.equals((Object)xmlRpcClientConfigImpl0));
      assertNotNull(xmlRpcClientConfigImpl1);
      assertNotSame(xmlRpcClientConfigImpl1, xmlRpcClientConfigImpl0);
      assertNotSame(xmlRpcClientConfigImpl0, xmlRpcClientConfigImpl1);
      assertNull(xmlRpcClientConfigImpl1.getBasicUserName());
      assertEquals(0, xmlRpcClientConfigImpl1.getReplyTimeout());
      assertNull(xmlRpcClientConfigImpl1.getEncoding());
      assertFalse(xmlRpcClientConfigImpl1.isGzipRequesting());
      assertNull(xmlRpcClientConfigImpl1.getUserAgent());
      assertNull(xmlRpcClientConfigImpl1.getBasicPassword());
      assertFalse(xmlRpcClientConfigImpl1.isContentLengthOptional());
      assertFalse(xmlRpcClientConfigImpl1.isEnabledForExceptions());
      assertEquals(0, xmlRpcClientConfigImpl1.getConnectionTimeout());
      assertFalse(xmlRpcClientConfigImpl1.isEnabledForExtensions());
      assertFalse(xmlRpcClientConfigImpl1.isGzipCompressing());
      assertNull(xmlRpcClientConfigImpl1.getBasicEncoding());
      assertNull(xmlRpcClientConfigImpl0.getBasicUserName());
      assertNull(xmlRpcClientConfigImpl0.getEncoding());
      assertNull(xmlRpcClientConfigImpl0.getUserAgent());
      assertNull(xmlRpcClientConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcClientConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcClientConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcClientConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcClientConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcClientConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcClientConfigImpl0.isGzipCompressing());
      
      xmlRpcClientConfigImpl0.setGzipCompressing(false);
      assertFalse(xmlRpcClientConfigImpl0.equals((Object)xmlRpcClientConfigImpl1));
      assertNotSame(xmlRpcClientConfigImpl0, xmlRpcClientConfigImpl1);
      assertNull(xmlRpcClientConfigImpl0.getBasicUserName());
      assertNull(xmlRpcClientConfigImpl0.getEncoding());
      assertNull(xmlRpcClientConfigImpl0.getUserAgent());
      assertNull(xmlRpcClientConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcClientConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcClientConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcClientConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcClientConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcClientConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcClientConfigImpl0.isGzipCompressing());
      
      URL uRL0 = xmlRpcClientConfigImpl1.getServerURL();
      assertFalse(xmlRpcClientConfigImpl1.equals((Object)xmlRpcClientConfigImpl0));
      assertFalse(xmlRpcClientConfigImpl0.equals((Object)xmlRpcClientConfigImpl1));
      assertNull(uRL0);
      assertNotSame(xmlRpcClientConfigImpl1, xmlRpcClientConfigImpl0);
      assertNotSame(xmlRpcClientConfigImpl0, xmlRpcClientConfigImpl1);
      assertNull(xmlRpcClientConfigImpl1.getBasicUserName());
      assertEquals(0, xmlRpcClientConfigImpl1.getReplyTimeout());
      assertNull(xmlRpcClientConfigImpl1.getEncoding());
      assertFalse(xmlRpcClientConfigImpl1.isGzipRequesting());
      assertNull(xmlRpcClientConfigImpl1.getUserAgent());
      assertNull(xmlRpcClientConfigImpl1.getBasicPassword());
      assertFalse(xmlRpcClientConfigImpl1.isContentLengthOptional());
      assertFalse(xmlRpcClientConfigImpl1.isEnabledForExceptions());
      assertEquals(0, xmlRpcClientConfigImpl1.getConnectionTimeout());
      assertFalse(xmlRpcClientConfigImpl1.isEnabledForExtensions());
      assertFalse(xmlRpcClientConfigImpl1.isGzipCompressing());
      assertNull(xmlRpcClientConfigImpl1.getBasicEncoding());
      assertNull(xmlRpcClientConfigImpl0.getBasicUserName());
      assertNull(xmlRpcClientConfigImpl0.getEncoding());
      assertNull(xmlRpcClientConfigImpl0.getUserAgent());
      assertNull(xmlRpcClientConfigImpl0.getBasicPassword());
      assertEquals(0, xmlRpcClientConfigImpl0.getConnectionTimeout());
      assertFalse(xmlRpcClientConfigImpl0.isGzipRequesting());
      assertFalse(xmlRpcClientConfigImpl0.isContentLengthOptional());
      assertEquals(0, xmlRpcClientConfigImpl0.getReplyTimeout());
      assertNull(xmlRpcClientConfigImpl0.getBasicEncoding());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExceptions());
      assertFalse(xmlRpcClientConfigImpl0.isEnabledForExtensions());
      assertFalse(xmlRpcClientConfigImpl0.isGzipCompressing());
      
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.load(classLoader1, (URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = "s91yl*<EB";
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.newHandlerClass((ClassLoader) null, "s91yl*<EB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      String string0 = "org.apache.commons.httpclient.HttpClient";
      try { 
        propertyHandlerMapping0.getMethodSignature("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0 = new RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0);
      
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      propertyHandlerMapping0.handlerMap = (Map) hashMap0;
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(propertyHandlerMapping0.handlerMap.isEmpty());
      assertEquals(0, propertyHandlerMapping0.handlerMap.size());
      
      TypeConverterFactory typeConverterFactory0 = propertyHandlerMapping0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      try { 
        propertyHandlerMapping0.getMethodHelp("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: 
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      assertNotNull(propertyHandlerMapping0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      WebServer webServer0 = new WebServer(0);
      assertNotNull(webServer0);
      
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      assertNotNull(xmlRpcStreamServer0);
      assertEquals(0, xmlRpcStreamServer0.getMaxThreads());
      
      TypeConverterFactory typeConverterFactory0 = xmlRpcStreamServer0.getTypeConverterFactory();
      assertNotNull(typeConverterFactory0);
      assertEquals(0, xmlRpcStreamServer0.getMaxThreads());
      
      Class<String> class0 = String.class;
      TypeConverter typeConverter0 = typeConverterFactory0.getTypeConverter(class0);
      assertNotNull(typeConverter0);
      assertEquals(0, xmlRpcStreamServer0.getMaxThreads());
      
      propertyHandlerMapping0.setTypeConverterFactory(typeConverterFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      assertEquals(0, xmlRpcStreamServer0.getMaxThreads());
      
      propertyHandlerMapping0.removeHandler((String) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      AbstractReflectiveHandlerMapping.AuthenticationHandler abstractReflectiveHandlerMapping_AuthenticationHandler0 = propertyHandlerMapping0.getAuthenticationHandler();
      assertNull(abstractReflectiveHandlerMapping_AuthenticationHandler0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<InputStream> class1 = InputStream.class;
      propertyHandlerMapping0.addHandler(".", class1);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      RequestProcessorFactoryFactory requestProcessorFactoryFactory0 = propertyHandlerMapping0.getRequestProcessorFactoryFactory();
      assertNotNull(requestProcessorFactoryFactory0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
      
      Class<InputStream> class2 = InputStream.class;
      propertyHandlerMapping0.addHandler("execute: Request performed successfully", class2);
      assertSame(class2, class1);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      Class<Method> class0 = Method.class;
      propertyHandlerMapping0.registerPublicMethods((String) null, class0);
      propertyHandlerMapping0.getAuthenticationHandler();
      propertyHandlerMapping0.setAuthenticationHandler((AbstractReflectiveHandlerMapping.AuthenticationHandler) null);
      Class<Integer> class1 = Integer.class;
      propertyHandlerMapping0.addHandler("-Q>6!hO&Z@7Jr", class1);
      String string0 = "h8Nn,.C?|\\Oz+$GZ'";
      propertyHandlerMapping0.addHandler("h8Nn,.C?|Oz+$GZ'", class0);
      propertyHandlerMapping0.getListMethods();
      try { 
        propertyHandlerMapping0.getHandler("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such handler: 
         //
         verifyException("org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping", e);
      }
  }
}
