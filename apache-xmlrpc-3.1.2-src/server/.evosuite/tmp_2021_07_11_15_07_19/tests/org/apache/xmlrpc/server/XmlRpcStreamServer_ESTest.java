/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 10:41:02 GMT 2021
 */

package org.apache.xmlrpc.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.net.InetAddress;
import java.util.Enumeration;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.apache.commons.httpclient.HttpRecoverableException;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.common.ServerStreamConnection;
import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;
import org.apache.xmlrpc.common.XmlRpcStreamRequestConfig;
import org.apache.xmlrpc.serializer.XmlRpcWriter;
import org.apache.xmlrpc.serializer.XmlWriterFactory;
import org.apache.xmlrpc.server.XmlRpcErrorLogger;
import org.apache.xmlrpc.server.XmlRpcLocalStreamServer;
import org.apache.xmlrpc.server.XmlRpcStreamServer;
import org.apache.xmlrpc.webserver.WebServer;
import org.apache.xmlrpc.webserver.XmlRpcServletServer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlRpcStreamServer_ESTest extends XmlRpcStreamServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn("8", "8").when(throwable0).getMessage();
      doReturn("8").when(throwable0).toString();
      Throwable throwable1 = xmlRpcLocalStreamServer0.convertThrowable(throwable0);
      xmlRpcLocalStreamServer0.logError(throwable1);
      assertEquals(0, xmlRpcLocalStreamServer0.getMaxThreads());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      boolean boolean0 = xmlRpcLocalStreamServer0.isContentLengthRequired(xmlRpcClientConfigImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WebServer webServer0 = new WebServer((-44));
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      MockFile mockFile0 = new MockFile("execute: ->", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      XmlRpcWriter xmlRpcWriter0 = xmlRpcStreamServer0.getXmlRpcWriter(xmlRpcClientConfigImpl0, mockFileOutputStream0);
      assertNotNull(xmlRpcWriter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      xmlRpcLocalStreamServer0.setXMLWriterFactory((XmlWriterFactory) null);
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      assertNull(xmlWriterFactory0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      OutputStream outputStream0 = xmlRpcLocalStreamServer0.getOutputStream((XmlRpcStreamRequestConfig) null, serverStreamConnection0, (-644));
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      OutputStream outputStream0 = xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig0, (OutputStream) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      InputStream inputStream0 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      xmlRpcServletServer0.setErrorLogger((XmlRpcErrorLogger) null);
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcServletServer0.getErrorLogger();
      assertNull(xmlRpcErrorLogger0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      Throwable throwable0 = xmlRpcLocalStreamServer0.convertThrowable((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig0, byteArrayOutputStream0, xmlRpcStreamRequestConfig0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to write XML-RPC response: Unsupported Java type: org.apache.xmlrpc.common.XmlRpcStreamRequestConfig$MockitoMock$327938109
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WebServer webServer0 = new WebServer(1);
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#&Ic*~%BCl?6g");
      // Undeclared exception!
      try { 
        xmlRpcStreamServer0.writeResponse(xmlRpcHttpRequestConfigImpl0, mockFileOutputStream0, xmlRpcHttpRequestConfigImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl cannot be cast to org.apache.xmlrpc.webserver.RequestData
         //
         verifyException("org.apache.xmlrpc.webserver.ConnectionServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d+OMyt");
      mockFileOutputStream0.close();
      HttpRecoverableException httpRecoverableException0 = new HttpRecoverableException();
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcClientConfigImpl0, mockFileOutputStream0, httpRecoverableException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to write XML-RPC response: Failed to flush target writer: null
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeError(xmlRpcClientConfigImpl0, byteArrayOutputStream0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      WebServer webServer0 = new WebServer(1944, inetAddress0);
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      MockFile mockFile0 = new MockFile((String) null, ")YLG;^A[nDa`[]k2;@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      HttpRecoverableException httpRecoverableException0 = new HttpRecoverableException();
      Throwable throwable0 = httpRecoverableException0.initCause((Throwable) null);
      // Undeclared exception!
      try { 
        xmlRpcStreamServer0.writeError(xmlRpcClientConfigImpl0, objectOutputStream0, throwable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xmlrpc.client.XmlRpcClientConfigImpl cannot be cast to org.apache.xmlrpc.webserver.RequestData
         //
         verifyException("org.apache.xmlrpc.webserver.ConnectionServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.logError((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn("Ow").when(xmlRpcStreamRequestConfig0).getEncoding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      try { 
        xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcStreamRequestConfig0, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported encoding: Ow
         //
         verifyException("org.apache.xmlrpc.serializer.BaseXmlWriterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcHttpRequestConfigImpl xmlRpcHttpRequestConfigImpl0 = new XmlRpcHttpRequestConfigImpl();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getXmlRpcWriter(xmlRpcHttpRequestConfigImpl0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig0, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-23), 15);
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcClientConfigImpl0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WebServer webServer0 = new WebServer(0);
      XmlRpcStreamServer xmlRpcStreamServer0 = webServer0.getXmlRpcServer();
      // Undeclared exception!
      try { 
        xmlRpcStreamServer0.getOutputStream((XmlRpcStreamRequestConfig) null, (ServerStreamConnection) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, (XmlRpcStreamRequestConfig) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.getInputStream((XmlRpcStreamRequestConfig) null, (ServerStreamConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(serverStreamConnection0).newInputStream();
      xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      // Undeclared exception!
      try { 
        xmlRpcServletServer0.execute((XmlRpcStreamRequestConfig) xmlRpcClientConfigImpl0, (ServerStreamConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.XmlRpcServletServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlWriterFactory xmlWriterFactory0 = xmlRpcLocalStreamServer0.getXMLWriterFactory();
      assertNotNull(xmlWriterFactory0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute((XmlRpcStreamRequestConfig) null, (ServerStreamConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getCharacterEncoding();
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      doReturn((String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((Enumeration<Object>) null).when(httpServletRequest0).getHeaders(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn("").when(servletOutputStream0).toString();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0, (ServletOutputStream) null, (ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        xmlRpcServletServer0.execute((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.XmlRpcServletServer$ServletStreamConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getCharacterEncoding();
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      doReturn((String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((Enumeration<Object>) null).when(httpServletRequest0).getHeaders(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null, (ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        xmlRpcServletServer0.execute((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(serverStreamConnection0).newInputStream();
      doReturn((OutputStream) null).when(serverStreamConnection0).newOutputStream();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      ServletInputStream servletInputStream0 = mock(ServletInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1, 255, 1, 1).when(servletInputStream0).read();
      doReturn("l=k&KMXe/Q7)fiJ[").when(servletInputStream0).toString();
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("l=k&KMXe/Q7)fiJ[").when(httpServletRequest0).getCharacterEncoding();
      doReturn(servletInputStream0).when(httpServletRequest0).getInputStream();
      doReturn("l=k&KMXe/Q7)fiJ[", "l=k&KMXe/Q7)fiJ[").when(httpServletRequest0).getHeader(anyString());
      doReturn(enumeration0).when(httpServletRequest0).getHeaders(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        xmlRpcServletServer0.execute((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);
        fail("Expecting exception: ServletException");
      
      } catch(ServletException e) {
         //
         // Unsupported encoding: l=k&KMXe/Q7)fiJ[
         //
         verifyException("org.apache.xmlrpc.webserver.XmlRpcServletServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      MockFile mockFile0 = new MockFile("o#nV", "AioRPx2:tE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn((ServletInputStream) null).when(serverStreamConnection0).newInputStream();
      doReturn(mockPrintStream0).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.execute((XmlRpcStreamRequestConfig) xmlRpcClientConfigImpl0, serverStreamConnection0);
      assertEquals(0, xmlRpcClientConfigImpl0.getReplyTimeout());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      MockFile mockFile0 = new MockFile((File) null, "'7HY^WByMjJ?pxqEt}b");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(true).when(xmlRpcStreamRequestConfig0).isGzipRequesting();
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig0, mockPrintStream0);
      assertEquals(10L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipRequesting();
      MockFile mockFile0 = new MockFile("enter HttpConnectionManager.releaseConnection(HttpConnection)", "enter HttpConnectionManager.releaseConnection(HttpConnection)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      xmlRpcLocalStreamServer0.getOutputStream(serverStreamConnection0, xmlRpcStreamRequestConfig0, mockPrintStream0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn(false).when(xmlRpcStreamRequestConfig0).isGzipCompressing();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)7);
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(pushbackInputStream0).when(serverStreamConnection0).newInputStream();
      InputStream inputStream0 = xmlRpcLocalStreamServer0.getInputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      assertSame(inputStream0, pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        xmlRpcLocalStreamServer0.getRequest(xmlRpcStreamRequestConfig0, byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse XML-RPC request: Invalid byte 2 of 2-byte UTF-8 sequence.
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(xmlRpcStreamRequestConfig0).isEnabledForExtensions();
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(byteArrayInputStream0).when(serverStreamConnection0).newInputStream();
      doReturn(byteArrayOutputStream0).when(serverStreamConnection0).newOutputStream();
      xmlRpcLocalStreamServer0.execute(xmlRpcStreamRequestConfig0, serverStreamConnection0);
      assertEquals(0, xmlRpcLocalStreamServer0.getMaxThreads());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xmlRpcStreamRequestConfig0).getEncoding();
      // Undeclared exception!
      try { 
        xmlRpcLocalStreamServer0.writeResponse(xmlRpcStreamRequestConfig0, (OutputStream) null, xmlRpcStreamRequestConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      xmlRpcServletServer0.setErrorLogger((XmlRpcErrorLogger) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getCharacterEncoding();
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      doReturn((String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((Enumeration) null).when(httpServletRequest0).getHeaders(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        xmlRpcServletServer0.execute((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.XmlRpcStreamServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      MockFile mockFile0 = new MockFile((File) null, "'7HY^WByMjJ?pxqEt}b");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ServerStreamConnection serverStreamConnection0 = mock(ServerStreamConnection.class, new ViolatedAssumptionAnswer());
      doReturn(mockPrintStream0).when(serverStreamConnection0).newOutputStream();
      XmlRpcStreamRequestConfig xmlRpcStreamRequestConfig0 = mock(XmlRpcStreamRequestConfig.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = xmlRpcLocalStreamServer0.getOutputStream(xmlRpcStreamRequestConfig0, serverStreamConnection0, 5891);
      assertSame(mockPrintStream0, outputStream0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlRpcServletServer xmlRpcServletServer0 = new XmlRpcServletServer();
      XmlRpcErrorLogger xmlRpcErrorLogger0 = xmlRpcServletServer0.getErrorLogger();
      assertNotNull(xmlRpcErrorLogger0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlRpcLocalStreamServer xmlRpcLocalStreamServer0 = new XmlRpcLocalStreamServer();
      XmlRpcClientConfigImpl xmlRpcClientConfigImpl0 = new XmlRpcClientConfigImpl();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d+OMyt");
      HttpRecoverableException httpRecoverableException0 = new HttpRecoverableException();
      xmlRpcLocalStreamServer0.writeError(xmlRpcClientConfigImpl0, mockFileOutputStream0, httpRecoverableException0);
      assertEquals(0, xmlRpcClientConfigImpl0.getReplyTimeout());
  }
}
