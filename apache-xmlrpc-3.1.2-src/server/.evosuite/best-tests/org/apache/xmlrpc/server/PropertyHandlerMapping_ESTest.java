/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 10:41:56 GMT 2021
 */

package org.apache.xmlrpc.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import org.apache.xmlrpc.server.PropertyHandlerMapping;
import org.apache.xmlrpc.server.RequestProcessorFactoryFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyHandlerMapping_ESTest extends PropertyHandlerMapping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      Class<String> class0 = Class.class;
      propertyHandlerMapping0.addHandler("QzM[+SF\"", class0);
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class class0 = propertyHandlerMapping0.newHandlerClass(classLoader0, "org.apache.log4j.spi.Configurator");
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((Integer) null, integer0);
      propertyHandlerMapping0.handlerMap = (Map) hashMap0;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.removeHandler("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      hashMap0.put(object0, ".floatValue");
      propertyHandlerMapping0.handlerMap = (Map) hashMap0;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.removeHandler(",");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        propertyHandlerMapping0.newHandlerClass(classLoader0, "!G+BJd1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load class: !G+BJd1
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.newHandlerClass(classLoader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.load(classLoader0, (Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(979);
      hashMap0.put(integer0, "#");
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.load(classLoader0, (Map) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        propertyHandlerMapping0.load(classLoader0, uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.load((ClassLoader) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0 = new RequestProcessorFactoryFactory.StatelessProcessorFactoryFactory();
      propertyHandlerMapping0.setRequestProcessorFactoryFactory(requestProcessorFactoryFactory_StatelessProcessorFactoryFactory0);
      Class<String> class0 = Class.class;
      try { 
        propertyHandlerMapping0.addHandler("QzM[+SF\"", class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal access when instantiating class java.lang.Class
         //
         verifyException("org.apache.xmlrpc.metadata.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.addHandler("QzM[+SF\"", (Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("~lQ0HC%&#.`_zWk", "~lQ0HC%&#.`_zWk");
      try { 
        propertyHandlerMapping0.load(classLoader0, (Map) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load class: ~lQ0HC%&#.`_zWk
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      Class<Integer> class0 = Class.class;
      propertyHandlerMapping0.registerPublicMethods("", class0);
      propertyHandlerMapping0.removeHandler("o-g.apache.xmlrpc.server.PropertyHandlerMapping");
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      Class<Integer> class0 = Class.class;
      propertyHandlerMapping0.registerPublicMethods("", class0);
      propertyHandlerMapping0.removeHandler("");
      assertFalse(propertyHandlerMapping0.isVoidMethodEnabled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class class0 = propertyHandlerMapping0.newHandlerClass(classLoader0, "org.apache.xmlrpc.common.TypeConverterFactoryImpl$IdentityTypeConverter");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      propertyHandlerMapping0.load(classLoader0, (Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        propertyHandlerMapping0.load(classLoader0, "Unable to load class: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to locate resource Unable to load class: 
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        propertyHandlerMapping0.load(classLoader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to load class: 
         //
         verifyException("org.apache.xmlrpc.server.PropertyHandlerMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.addHandler("Unable to load class: ", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid parameter or result type: java.nio.charset.Charset
         //
         verifyException("org.apache.xmlrpc.common.TypeConverterFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyHandlerMapping propertyHandlerMapping0 = new PropertyHandlerMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        propertyHandlerMapping0.load(classLoader0, uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }
}
