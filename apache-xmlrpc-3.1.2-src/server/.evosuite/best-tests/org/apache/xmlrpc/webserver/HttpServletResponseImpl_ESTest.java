/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 11 10:40:54 GMT 2021
 */

package org.apache.xmlrpc.webserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketImplFactory;
import java.util.LinkedList;
import java.util.Locale;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import org.apache.xmlrpc.webserver.HttpServletResponseImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpServletResponseImpl_ESTest extends HttpServletResponseImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertNotNull(inetAddress0);
      
      int int0 = 303;
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string1 = "K>a";
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setBufferSize(303);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte)109;
      boolean boolean2 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean3 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setContentType((String) null);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setContentLength(406);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setContentLength((-1422));
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte)109;
      boolean boolean2 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean3 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      mockSocket0.setReuseAddress(false);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addHeader((String) null, "This output stream is already closed.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setStatus(410);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      Integer integer0 = new Integer(303);
      assertEquals(303, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("HTTP/1.0 410 Gone\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\nContent-Length: 303\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("HTTP/1.0 410 Gone\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\nContent-Length: 303\r\n\r\n", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "Tis output stream is alray clo;ed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setStatus(410);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      Integer integer0 = new Integer(303);
      assertEquals(303, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals("HTTP/1.0 410 Gone\r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: Tis output stream is alray clo;ed.\r\nContent-Length: 303\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals("HTTP/1.0 410 Gone\r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: Tis output stream is alray clo;ed.\r\nContent-Length: 303\r\n\r\n", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Cookie cookie0 = new Cookie("", "U}#~5");
      assertNotNull(cookie0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addCookie(cookie0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(501);
      assertEquals("Not Implemented", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Not Implemented");
      assertNull(integer0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage(505);
      assertEquals("HTTP Version Not Supported", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("HTTP/1.0 503 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      httpServletResponseImpl0.setContentType("ZL1/");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setStatus(303);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Locale locale0 = httpServletResponseImpl0.getLocale();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL("charset=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals("HTTP/1.0 503 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      httpServletResponseImpl0.setContentType("ZL1/");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setStatus(303);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      int int0 = httpServletResponseImpl0.getBufferSize();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, int0);
      
      int int1 = httpServletResponseImpl0.getBufferSize();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("HTTP/1.0 503 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      httpServletResponseImpl0.setContentType("HTTP/1.0 503 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setStatus(303);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string1 = httpServletResponseImpl0.getCharacterEncoding();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals("ISO-8859-1", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      httpServletResponseImpl0.setContentType("ZL1/");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setStatus(303);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError((int) (byte)109, "");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError((int) (byte)109);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      boolean boolean3 = mockSocket0.getKeepAlive();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("HTTP/1.0 503 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      httpServletResponseImpl0.setContentType("ZL1/");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setStatus(303);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      String string2 = httpServletResponseImpl0.getContentType();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ZL1/", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("HTTP/1.0 503 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      httpServletResponseImpl0.setContentType("ZL1/");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setStatus(303);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendRedirect("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket("", 303, false);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setContentLength(1737);
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      boolean boolean3 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "See Other");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals("HTTP/1.0 200 OK\r\nContent-Type: \r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setDateHeader("See Other", 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setIntHeader("charset=", 0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string1 = httpServletResponseImpl0.getHttpHeaders((Integer) null);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isConnected());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("HTTP/1.0 503 \r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\ncharset=: 0\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.sendError((int) (byte)25, "org.apache.xmlrpc.webserver.ServletOutputStreamImpl");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't send an error message, if the response has already been committed.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      mockSocket0.setReuseAddress(false);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setStatus(410);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      Integer integer0 = new Integer(303);
      assertEquals(303, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals("HTTP/1.0 410 Gone\r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\nContent-Length: 303\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(423);
      assertEquals("Locked", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte)109;
      boolean boolean2 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean3 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setContentLength(406);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      mockSocket0.setReuseAddress(false);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addIntHeader("vJ$Z-'_PQ=", (-3641));
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      boolean boolean3 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(servletOutputStream0);
      
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(409);
      assertEquals("Conflict", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      mockSocket0.setReuseAddress(false);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setCharacterEncoding("org.apache.xmlrpc.webserver.ServletOutputStreamImpl");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals("org.apache.xmlrpc.webserver.ServletOutputStreamImpl", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setStatus(303, "R|cG_X(!|=");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 204;
      String string0 = HttpServletResponseImpl.getStatusMessage(204);
      assertEquals("No Content", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      mockSocket0.setReuseAddress(false);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      
      try { 
        httpServletResponseImpl0.flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed stream
         //
         verifyException("org.evosuite.runtime.mock.java.net.SocketOut", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(mockSocket0.isBound());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string1 = HttpServletResponseImpl.getStatusMessage((-184));
      assertEquals("HTTP Response Status -184", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.setDateHeader("Z3", 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byte byte0 = (byte)109;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertNotNull(inetAddress0);
      
      String string0 = "";
      int int0 = 303;
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      mockSocket0.setReuseAddress(false);
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeURL("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(414);
      assertEquals("Request URI Too Long", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Request URI Too Long");
      assertNull(integer0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage(207);
      assertEquals("Multi-Status", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      int int0 = mockSocket0.getReceiveBufferSize();
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertEquals(131072, int0);
      
      mockSocket0.setReuseAddress(false);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isBound());
      assertTrue(mockSocket0.isConnected());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addDateHeader("4HWLB<LH", (-1L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      mockSocket0.setReuseAddress(false);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      mockSocket0.setTrafficClass((byte)25);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      
      String string1 = "K>a";
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.encodeRedirectURL("MyrB[88eqiiBxj");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(407);
      assertEquals("Proxy Authentication Required", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Proxy Authentication Required");
      assertNull(integer0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage(505);
      assertEquals("HTTP Version Not Supported", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(405);
      assertEquals("Method Not Allowed", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(410);
      assertEquals("Gone", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 356;
      String string0 = HttpServletResponseImpl.getStatusMessage(356);
      assertEquals("HTTP Response Status 356", string0);
      assertNotNull(string0);
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-578
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(100);
      assertEquals("Continue", string0);
      assertNotNull(string0);
      
      int int0 = (-4394);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Continue", (-4394), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-4394
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      String string0 = HttpServletResponseImpl.getStatusMessage(302);
      assertEquals("Moved Temporarily", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(414);
      assertEquals("Request URI Too Long", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Request URI Too Long");
      assertNull(integer0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage(417);
      assertEquals("Expectation Failed", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-2807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2807
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertNotNull(inetAddress0);
      
      Locale locale0 = new Locale("", "");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean0);
      
      int int0 = 304;
      String string0 = HttpServletResponseImpl.getStatusMessage(304);
      assertEquals("Not Modified", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      
      boolean boolean1 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Not Modified");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(403);
      assertEquals("Forbidden", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(201);
      assertEquals("Created", string0);
      assertNotNull(string0);
      
      String string1 = "D^";
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("D^", 0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@33491c4e
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(414);
      assertEquals("Request URI Too Long", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Request URI Too Long");
      assertNull(integer0);
      
      String string1 = HttpServletResponseImpl.getStatusMessage(507);
      assertEquals("Insufficient Storage", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean0);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      boolean boolean1 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(412);
      assertEquals(412, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = HttpServletResponseImpl.getStatusMessage(404);
      assertEquals("Not Found", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 412, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@f294f7b
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(416);
      assertEquals("Requested Range Not Satisfiable", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(415);
      assertEquals("Unsupported Media Type", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Unsupported Media Type");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(401);
      assertEquals("Unauthorized", string0);
      assertNotNull(string0);
      
      String string1 = "S-JA7TJ";
      Integer integer0 = Integer.getInteger("Unauthorized");
      assertNull(integer0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Unauthorized", 401);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@33494cdd
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean0);
      
      int int0 = 503;
      String string0 = HttpServletResponseImpl.getStatusMessage(503);
      assertEquals("Service Unavailable", string0);
      assertNotNull(string0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(412);
      assertEquals("Precondition Failed", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Precondition Failed");
      assertNull(integer0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Precondition Failed", 412);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@33494e32
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(413);
      assertEquals("Request Entity Too Large", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Request Entity Too Large", 413);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@33494e51
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(400);
      assertEquals("Bad Request", string0);
      assertNotNull(string0);
      
      Integer integer0 = Integer.getInteger("Bad Request");
      assertNull(integer0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Bad Request", 400);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@33494cbe
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 203;
      String string0 = HttpServletResponseImpl.getStatusMessage(203);
      assertEquals("Non-Authoritative Information", string0);
      assertNotNull(string0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertNotNull(inetAddress0);
      
      int int0 = (-3974);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-3974), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-3974
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      mockSocket0.setReuseAddress(false);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.reset();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
      
      httpServletResponseImpl0.setContentLength(980);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(mockSocket0.isBound());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertFalse(httpServletResponseImpl0.isCommitted());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)109;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)109}, byteArray0);
      
      boolean boolean2 = NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(httpServletResponseImpl0);
      
      httpServletResponseImpl0.setContentType("");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertFalse(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      String string0 = HttpServletResponseImpl.getStatusMessage(303);
      assertEquals("See Other", string0);
      assertNotNull(string0);
      
      httpServletResponseImpl0.sendError(503, "");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(locale0);
      
      httpServletResponseImpl0.setLocale((Locale) null);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      ServletOutputStream servletOutputStream0 = httpServletResponseImpl0.getOutputStream();
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertNotNull(servletOutputStream0);
      
      httpServletResponseImpl0.setStatus(410);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      
      Integer integer0 = new Integer(303);
      assertEquals(303, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("HTTP/1.0 410 Gone\r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\nContent-Length: 303\r\n\r\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = httpServletResponseImpl0.getHttpHeaders(integer0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertTrue(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertTrue(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[addr=/127.0.0.1,port=303,localport=40000]", mockSocket0.toString());
      assertTrue(httpServletResponseImpl0.isCommitted());
      assertEquals("ISO-8859-1", httpServletResponseImpl0.getCharacterEncoding());
      assertEquals(8192, httpServletResponseImpl0.getBufferSize());
      assertEquals("HTTP/1.0 410 Gone\r\nContent-Type: text/html; charset=ISO-8859-1\r\nsee other: K>a\r\nk>a: This output stream is already closed.\r\nContent-Length: 303\r\n\r\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.addDateHeader("K>a", (byte)25);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not implemented
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(Throwable e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 407;
      HttpServletResponseImpl.getStatusMessage(407);
      Integer.getInteger("Proxy Authentication Required");
      int int1 = 490;
      HttpServletResponseImpl.getStatusMessage(490);
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 203;
      HttpServletResponseImpl.getStatusMessage(203);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Non-Authoritative Information", 203);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@334934e3
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HttpServletResponseImpl.getStatusMessage(411);
      HttpServletResponseImpl httpServletResponseImpl0 = null;
      try {
        httpServletResponseImpl0 = new HttpServletResponseImpl((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = HttpServletResponseImpl.getStatusMessage(414);
      assertEquals("Request URI Too Long", string0);
      
      Integer.getInteger("Request URI Too Long");
      String string1 = HttpServletResponseImpl.getStatusMessage(505);
      assertEquals("HTTP Version Not Supported", string1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 303);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)25;
      byteArray0[0] = (byte)25;
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[1] = (byte)109;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket(inetAddress0, 303);
      HttpServletResponseImpl httpServletResponseImpl0 = new HttpServletResponseImpl(mockSocket0);
      httpServletResponseImpl0.setContentType("");
      mockSocket0.setReuseAddress(false);
      HttpServletResponseImpl.getStatusMessage(303);
      httpServletResponseImpl0.sendError(503, "");
      httpServletResponseImpl0.addHeader("K>a", "This output stream is already closed.");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      httpServletResponseImpl0.setLocale((Locale) null);
      httpServletResponseImpl0.setHeader("See Other", "K>a");
      httpServletResponseImpl0.getOutputStream();
      httpServletResponseImpl0.setContentLength(406);
      httpServletResponseImpl0.getLocale();
      // Undeclared exception!
      try { 
        httpServletResponseImpl0.getWriter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You may call either getWriter() or getOutputStream(), but not both.
         //
         verifyException("org.apache.xmlrpc.webserver.HttpServletResponseImpl", e);
      }
  }
}
